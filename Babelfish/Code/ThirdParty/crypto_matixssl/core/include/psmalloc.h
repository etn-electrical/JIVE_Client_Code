/**
 *      @file    psmalloc.h
 *
 *
 *      Header for psMalloc functions.
 */
/*
 *      Copyright (c) 2013-2017 INSIDE Secure Corporation
 *      All Rights Reserved
 *
 *      THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF INSIDE.
 *
 *      Please do not edit this file without first consulting INSIDE support.
 *      Unauthorized changes to this file are not supported by INSIDE.
 *
 *      The copyright notice above does not evidence any actual or intended
 *      publication of such source code.
 *
 *      This Module contains Proprietary Information of INSIDE and should be
 *      treated as Confidential.
 *
 *      The information in this file is provided for the exclusive use of the
 *      licensees of INSIDE. Such users have the right to use, modify,
 *      and incorporate this code into products for purposes authorized by the
 *      license agreement provided they include this notice and the associated
 *      copyright notice with any such product.
 *
 *      The information in this file is provided "AS IS" without warranty.
 */
/******************************************************************************/

#ifndef _h_PS_MALLOC
# define _h_PS_MALLOC

/******************************************************************************/
/*
 */
# ifdef PS_UNSUPPORTED_OS
#  include "matrixos.h"
# else
/******************************************************************************/
/*
 */

#  define MATRIX_NO_POOL      (void *) 0x0

/* Introduce variables used for memory pooling, so that the compiler does not
   give spurious warnings even when memory pools are not supported by the
   target operating system. */
#  define PS_POOL_USED(poolVar) PS_VARIABLE_SET_BUT_UNUSED(poolVar)

#  ifdef USE_MATRIX_MEMORY_MANAGEMENT

/******************************************************************************/
/*
    Define the system equivalent for malloc and free
    If they are not available, don't define this and use psDefineHeap at
        runtime to provide a static block of memory to use.
    psDefineHeap will also override USE_SYSTEM_MALLOC, so they can both be used
        simultaneously.
 */
#   define USE_SYSTEM_MALLOC /* Undefine if not using system malloc api */

#   ifdef USE_SYSTEM_MALLOC
#     include "osdep_stdlib.h" /* malloc, free, etc... */
#     define sysMalloc(A)    Malloc(A)
#     define sysFree(A)      Free(A)
#   endif /* USE_SYSTEM_MALLOC */

/******************************************************************************/
/*
    Define to enable memory statistics, level determines detail
    Level 1 = Pool stats on close (for tuning)
    Level 2 = Additional information for tuning plus level 1
    Level 3 = Pool stats and every alloc/free/realloc/calloc plus level 2
 */
/* #define MEM_TABLE */
/* #define MEM_STATS */
/* #define MEM_CAPTURE */
#   define MEM_STATS_LEVEL     1  /* Should be 1, 2 or 3 */
#   define MAX_BLOCK_STATS     64 /* Should be an even number */

/*
    Tuning for the number of cacheable block sizes. Set to 16 to handle numerous
    platforms by default. Should be optimized to fit specific platform needs.
 */
#   define MAX_CACHE_TYPES     16

/******************************************************************************/
/*
    Define USE_LARGE_POOLS to enable pools larger than 64KB. This causes
    16 bytes more overhead per allocation, and the minimum block size becomes
    32 bytes.
    By default, enable this on 64 bit platforms.
 */
#   ifdef HAVE_NATIVE_INT64
#    define USE_LARGE_POOLS
#   endif

/**
    "Magic" values to help detect memory corruption and double frees.
 */
#   ifndef USE_LARGE_POOLS
#    define PS_MAGIC_ALLOCED        0xF00D
#    define PS_MAGIC_SPLIT          0xC0ED
#    define PS_MAGIC_FREED          0xFEED
#    define MIN_BLOCK_SIZE      16/* Smallest allocatable block, multiple of 8 */
#   else
#    define PS_MAGIC_ALLOCED        0xF00DC0DE
#    define PS_MAGIC_SPLIT          0xC0EDBABE
#    define PS_MAGIC_FREED          0xFEEDBEEF
#    define MIN_BLOCK_SIZE      32/* Smallest allocatable block, multiple of 8 */
#   endif

#   define POOL_TYPE_MALLOC    0   /* Pool was created with sysMalloc() */
#   define POOL_TYPE_STATIC    1   /* Pool is in a static buffer */
#   define POOL_TYPE_HEAP      2   /* Pool is in global pool (g_pool) */

#   define POOL_FLAGS_CAPTURE  0x1 /* Record allocs (if MEM_CAPTURE defined) */

/*
    Each allocated block has the following header prepended
 */
typedef struct psMemHeader
{
#   ifndef USE_LARGE_POOLS
    unsigned short pad;         /* Pad to 8 byte boundary, holds magic value */
    unsigned short plen;        /* Number of bytes to previous mem block */
    unsigned short nlen;        /* Number of bytes to next mem block */
    unsigned short size;        /* Size in usable bytes of this mem block */
#   else
    unsigned int pad;           /* Pad to 8 byte boundary, holds magic value */
    unsigned int plen;          /* Number of bytes to previous mem block */
    unsigned int nlen;          /* Number of bytes to next mem block */
    unsigned int size;          /* Size in usable bytes of this mem block */
#   endif
    DLListEntry List;           /* 2 pointers */
} psMemHeader_t;

/*
    Each memory pool has the associated data
 */
typedef struct
{
    int32 size;                        /* Total size of pool */
    int32 remaining;                   /* Free bytes remaining */
    int32 type;                        /* System malloc, heap, or static mem */
    int32 flags;                       /* Implementation specific usage */
    /* Cached blocks */
    uint32 cacheSize[MAX_CACHE_TYPES]; /* Cache sizes */
    DLListEntry cache[MAX_CACHE_TYPES];
    DLListEntry heap[MAX_CACHE_TYPES];
#   ifdef MEM_STATS
    /* Statistics */
    int32 memAlloced;                  /* Outstanding memory allocations */
    int32 highWater;                   /* Max allocated memory in pool lifetime */
    int32 numTypes;                    /* Number of distinct allocation sizes requested */
    int32 numMerge;                    /* Number of block merges we were able to do */
    int32 numSplit;                    /* Number of block splits */
    int32 maxRemainder;                /* Largest unused remainder */
    int32 blockCount[MAX_BLOCK_STATS]; /* Number of blocks this size */
    int32 blockWater[MAX_BLOCK_STATS]; /* High water for this size */
    int32 blockCurr[MAX_BLOCK_STATS];  /* Allocated blocks this size */
    int32 blockSplit[MAX_BLOCK_STATS]; /* Allocated blocks this size */
    int32 blockSize[MAX_BLOCK_STATS];  /* Block to size index table */
    char name[16];
#   endif
    void *userPtr;
} psPool_t;

extern int32        psOpenMalloc(void);
extern void         psCloseMalloc(void);
extern void *psMallocNoPool(size_t size);
/* Provide convenience alias. */
#   define psFreeNoPool(A) psMalloc((A), MATRIX_NO_POOL)

#  else /* ! USE_MATRIX_MEMORY_MANAGEMENT */
/******************************************************************************/
/*
    Native memory routines
 */
#   include "osdep_stdlib.h"

#   define MAX_MEMORY_USAGE    0
#   define psOpenMalloc()      0
#   define psCloseMalloc()
#   define psDefineHeap(A, B)
#   define psAddPoolCache(A, B)
#   define psMalloc(A, B)      Malloc(B)
#   define psCalloc(A, B, C)   Calloc(B, C)
#   define psMallocNoPool      Malloc
#   define psRealloc(A, B, C)  Realloc(A, B)
#   define psFree(A, B)        Free(A)
#   define psFreeNoPool        Free

#ifndef PS_POOL_T_DEFINED
#define PS_POOL_T_DEFINED
typedef int32 psPool_t;
#endif

#  endif /* USE_MATRIX_MEMORY_MANAGEMENT */

/* Functions without pool: Add N to the name, omit pool. */
#  define psCallocN(B, C) psCalloc(MATRIX_NO_POOL, (B), (C))
#  define psZallocN(B)    psCalloc(MATRIX_NO_POOL, (B), 1)
#  define psMallocN(B) psMalloc(MATRIX_NO_POOL, (B))

/* See psUtil.h for psFreeN, psFreeFRR etc. helper functions. */

/******************************************************************************/

# endif /* !PS_UNSUPPORTED_OS */
#endif  /* _h_PS_MALLOC */
/******************************************************************************/

