/**
 *      @file    aes_aesni.h
 *
 *
 *      Header for AES-NI Hardware Crypto Instructions.
 */
/*
 *      Copyright (c) 2014-2017 INSIDE Secure Corporation
 *      All Rights Reserved
 *
 *      THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF INSIDE.
 *
 *      Please do not edit this file without first consulting INSIDE support.
 *      Unauthorized changes to this file are not supported by INSIDE.
 *
 *      The copyright notice above does not evidence any actual or intended
 *      publication of such source code.
 *
 *      This Module contains Proprietary Information of INSIDE and should be
 *      treated as Confidential.
 *
 *      The information in this file is provided for the exclusive use of the
 *      licensees of INSIDE. Such users have the right to use, modify,
 *      and incorporate this code into products for purposes authorized by the
 *      license agreement provided they include this notice and the associated
 *      copyright notice with any such product.
 *
 *      The information in this file is provided "AS IS" without warranty.
 */

/******************************************************************************/

#include "../cryptoApi.h"

#ifndef _h_AESNI_CRYPTO
# define _h_AESNI_CRYPTO

/******************************************************************************/
/*
    Intel Native Instructions for AES
    http://en.wikipedia.org/wiki/AES_instruction_set
 */

# ifdef USE_AESNI_AES_BLOCK
#  include "osdep_stdio.h"
#  include <emmintrin.h>
typedef struct __attribute__((aligned(16)))
{
    __m128i skey[15];       /* Key schedule (encrypt or decrypt) */
    uint16 rounds;          /* Number of rounds */
    uint16 type;            /* Encrypt or Decrypt */
} psAesKey_t;
# endif

# ifdef USE_AESNI_AES_CBC
typedef struct __attribute__((aligned(16)))
{
    psAesKey_t key;
    unsigned char IV[16];
} psAesCbc_t;
# endif

# ifdef USE_AESNI_AES_GCM
#  include <emmintrin.h>
typedef struct __attribute__((aligned(16)))
{
    psAesKey_t key;
    unsigned char IV[16];
    __m128i h_m128i;
    __m128i y_m128i;
    __m128i icb_m128i;
    int cipher_started;
    unsigned int a_len;
    unsigned int c_len;
} psAesGcm_t;
# endif

#endif /* _h_AESNI_CRYPTO */
/******************************************************************************/

