/**
 *      @file    pubkey_matrix.h
 *
 *
 *      RoT Implementation of RSA, DH and ECC.
 */
/*
 *      Copyright (c) 2013-2018 INSIDE Secure Corporation
 *      All Rights Reserved
 *
 *      THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF INSIDE.
 *
 *      Please do not edit this file without first consulting INSIDE support.
 *      Unauthorized changes to this file are not supported by INSIDE.
 *
 *      The copyright notice above does not evidence any actual or intended
 *      publication of such source code.
 *
 *      This Module contains Proprietary Information of INSIDE and should be
 *      treated as Confidential.
 *
 *      The information in this file is provided for the exclusive use of the
 *      licensees of INSIDE. Such users have the right to use, modify,
 *      and incorporate this code into products for purposes authorized by the
 *      license agreement provided they include this notice and the associated
 *      copyright notice with any such product.
 *
 *      The information in this file is provided "AS IS" without warranty.
 */
/******************************************************************************/

#ifndef _h_ROT_PUBKEY
# define _h_ROT_PUBKEY


# ifdef USE_ROT_RSA
typedef enum
{
    ps_rsa_key_type_sigver_priv = 0,
    ps_rsa_key_type_sigver_priv_pss = 1,
    ps_rsa_key_type_sigver_pub = 2,
    ps_rsa_key_type_sigver_pub_pss = 3,
    ps_rsa_key_type_key_transport_priv = 4,
    ps_rsa_key_type_key_transport_pub = 5
} psRsaKeyType_t;

typedef struct
{
    psPool_t *pool;
    psSize_t size;          /* Size of the key in bytes */
    uint8_t optimized;      /* Set if optimized */

    /* Signature/authentication key pair assets. */
    ValAssetId_t privSigAsset;
    ValAssetId_t pubSigAsset;
# ifdef USE_PKCS1_PSS
    ValAssetId_t privSigPssAsset;
    ValAssetId_t pubSigPssAsset;
# endif

    /* Key transport key pair assets. */
    ValAssetId_t privEncAsset;
    ValAssetId_t pubEncAsset;

    psRsaKeyType_t rotKeyType;
    int32_t rotSigAlg;

    /* The following are used for public keys. */
    ValAsymBigInt_t Mod; /* Modulus. */
    ValAsymBigInt_t Exp; /* Public exponent. */

    psBool_t longTermPrivAsset;
} psRsaKey_t;
# endif /* USE_ROT_RSA */

# ifdef USE_ROT_ECC
typedef struct
{
    uint8_t size;        /**< The size of the curve in octets */
    psCurve16_t curveId; /**< IANA named curve id for TLS use */
    uint8_t isOptimized; /**< 1 if optimized with field param A=-3. */
    uint32_t OIDsum;     /**< Internal Matrix OID */
    const char *name;    /**< name of curve */
    /* These below constitute the domain parameters */
    const char *prime;   /**< prime defining the curve field (ascii hex) */
    const char *A;       /**< The field's A param (ascii hex) */
    const char *B;       /**< The field's B param (ascii hex) */
    const char *order;   /**< The order of the curve (ascii hex) */
    const char *Gx;      /**< The x coordinate of the base point (ascii hex) */
    const char *Gy;      /**< The y coordinate of the base point (ascii hex) */
} psEccCurve_t;

typedef struct
{
    psPool_t *pool;
} psEccPoint_t;

typedef enum
{
    ps_ecc_key_type_ecdsa = 0,
    ps_ecc_key_type_ecdhe = 1
} psEccKeyType_t;

typedef struct
{
    psEccPoint_t pubkey;        /* The public key */
    const psEccCurve_t *curve;  /* pointer to named curve */
    psPool_t *pool;
    uint8_t type;               /* Type of key, PS_PRIVKEY or PS_PUBKEY */

    ValAssetId_t pubAsset;
    ValAssetId_t domainAsset;
    ValAssetId_t privAsset;
    ValAsymECCPoint_t pubPoint;
    psBool_t longTermPrivAsset;

    /* RoT requires to distinct between ECDSA and ECDHE keys. */
    psEccKeyType_t rotKeyType;
    /* RoT requires the hash algorithm to use to be fixed at key load time. */
    int32_t rotSigAlg;

    unsigned char pubValue[132];
} psEccKey_t;

/* RoT-specific structure for the ECC curves. */
typedef struct
{
    uint32_t CurveBits;
    const uint8_t * P_p;
    uint32_t PLen;
    const uint8_t * A_p;
    uint32_t ALen;
    const uint8_t * B_p;
    uint32_t BLen;
    const uint8_t * ECPointX_p;
    uint32_t ECPointXLen;
    const uint8_t * ECPointY_p;
    uint32_t ECPointYLen;
    const uint8_t * Order_p;
    uint32_t OrderLen;
    const uint8_t Cofactor;
} psRotCurve_t;
# endif /* USE_ROT_ECC */

/******************************************************************************/

#endif /* _h_ROT_PUBKEY */

