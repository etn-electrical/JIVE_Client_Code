/**
 *      @file    digest_rot.h
 *
 *
 *      Header for internal symmetric key cryptography support.
 *      RoT implementation.
 */
/*
 *      Copyright (c) 2013-2018 INSIDE Secure Corporation
 *      All Rights Reserved
 *
 *      THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF INSIDE.
 *
 *      Please do not edit this file without first consulting INSIDE support.
 *      Unauthorized changes to this file are not supported by INSIDE.
 *
 *      The copyright notice above does not evidence any actual or intended
 *      publication of such source code.
 *
 *      This Module contains Proprietary Information of INSIDE and should be
 *      treated as Confidential.
 *
 *      The information in this file is provided for the exclusive use of the
 *      licensees of INSIDE. Such users have the right to use, modify,
 *      and incorporate this code into products for purposes authorized by the
 *      license agreement provided they include this notice and the associated
 *      copyright notice with any such product.
 *
 *      The information in this file is provided "AS IS" without warranty.
 */

#ifndef _h_CRYPTO_DIGEST_ROT
# define _h_CRYPTO_DIGEST_ROT

#define SHA256_BLOCK_SZ 64
#define SHA384_BLOCK_SZ 128
#define SHA512_BLOCK_SZ 128

typedef struct
{
    ValSymContextPtr_t ctx;
    /* val_SymHashUpdate can only handle data that is a multiple
       of the block size. If psSha*Update gets passed in less
       data, we buffer it until psSha*Final. */
    unsigned char buffer[SHA512_BLOCK_SZ];
    psSize_t bufferedLen;
    psSize_t blockSize;
    psSize_t hashSize;
} psRotShaCtx_t;

typedef psRotShaCtx_t psSha256_t;
typedef psRotShaCtx_t psSha384_t;
typedef psRotShaCtx_t psSha512_t;

typedef struct
{
    psSha256_t sha256;
} psHmacSha256_t;

typedef struct
{
    psSha384_t sha384;
} psHmacSha384_t;

#endif /* _h_CRYPTO_DIGEST_ROT */

/******************************************************************************/

