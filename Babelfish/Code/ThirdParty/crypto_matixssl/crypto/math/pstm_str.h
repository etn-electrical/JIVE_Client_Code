/**
 *      @file    pstm_str.h
 *
 *
 *      Multiprecision number implementation: debug output.
 */
/*
 *      Copyright (c) 2017 INSIDE Secure Corporation
 *      All Rights Reserved
 *
 *      THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF INSIDE.
 *
 *      Please do not edit this file without first consulting INSIDE support.
 *      Unauthorized changes to this file are not supported by INSIDE.
 *
 *      The copyright notice above does not evidence any actual or intended
 *      publication of such source code.
 *
 *      This Module contains Proprietary Information of INSIDE and should be
 *      treated as Confidential.
 *
 *      The information in this file is provided for the exclusive use of the
 *      licensees of INSIDE. Such users have the right to use, modify,
 *      and incorporate this code into products for purposes authorized by the
 *      license agreement provided they include this notice and the associated
 *      copyright notice with any such product.
 *
 *      The information in this file is provided "AS IS" without warranty.
 */
/******************************************************************************/

#include "../cryptoApi.h"
#include "pstm.h"

/* Before defining pstm_str, ensure pstm has been processed.
   In some configurations the pstm is disabled,
   which also disables pstm_str. */
#ifndef PSTM_AVAILABLE
# undef NO_PSTM_STR
# define NO_PSTM_STR
#endif /* PSTM_AVAILABLE */

#ifndef NO_PSTM_STR

/* PSTM String: A string formatted version of number in PSTM.
   PSTM string is (typically) dynamically allocated. */
typedef char *pstm_str;

/* Static PSTM String used when trying to format null pointer. */
# define PSTM_STR_NULL ((char *) pstm_str_null)

/* Static PSTM String used when memory allocation fails. */
# define PSTM_STR_MEMFAIL ((char *) pstm_str_memfail)

extern const char *pstm_str_null;
extern const char *pstm_str_memfail;

/* Construct pstm_str from pstm integer.
   Even if the function fails, the result is printable with %s.
   Failure can be observed by comparing pstm_str against
   PSTM_STR_NULL and PSTM_STR_MEMFAIL. */
pstm_str pstm_str_from(psPool_t *pool, const pstm_int *a);

/* Free pstm_str.
   It is safe to call this function with an errorneous pstm_str, i.e.
   PSTM_STR_NULL or PSTM_STR_MEMFAIL. */
void pstm_str_free(psPool_t *pool, pstm_str str);

#endif /* NO_PSTM_STR */

