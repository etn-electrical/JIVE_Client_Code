#include <stdio.h>
#include <iostream>
#include "pscrypto-test-supp.hpp"
#include "cryptoApi.h"
#include <vector>
#include "../digest/sha256_standalone.h"

static const unsigned char randbytes[] = {
  0x80, 0x05, 0x07, 0x7a, 0x5e, 0xfe, 0x21, 0x39, 0xd3, 0x2d, 0x9a, 0x42,
  0xa4, 0x9f, 0x1a, 0xc3, 0x74, 0x5d, 0x08, 0x82, 0x6e, 0x31, 0x7c, 0x5d,
  0xdd, 0x31, 0x12, 0xb3, 0xd4, 0x06, 0x53, 0xad, 0xbb, 0xa9, 0x0a, 0x9f,
  0xf9, 0xe4, 0xc6, 0x53, 0x32, 0xed, 0x5e, 0xc1, 0x7d, 0x7a, 0xf3, 0xeb,
  0x6c, 0x52, 0x00, 0x2d, 0x02, 0xf2, 0x84, 0x33, 0x31, 0xe0, 0xf1, 0x91,
  0xfa, 0x78, 0xfd, 0xd0, 0xe1, 0xe7, 0x68, 0x69, 0xc2, 0x8c, 0xb1, 0xca,
  0xdc, 0xe1, 0xb9, 0x4e, 0x74, 0xbb, 0x85, 0x25, 0x5b, 0x07, 0xbf, 0x0a,
  0xe7, 0x66, 0x27, 0xe9, 0x1a, 0x6a, 0x68, 0x28, 0x91, 0xd9, 0xf8, 0xe6,
  0xf0, 0xdd, 0x4b, 0x20, 0x65, 0x2f, 0x47, 0x00, 0xf0, 0x48, 0x6a, 0x22,
  0x51, 0xc0, 0x9e, 0xb7, 0x73, 0x21, 0xd6, 0x48, 0xfd, 0xd4, 0x49, 0x08,
  0x74, 0xde, 0xcf, 0x16, 0x50, 0x27, 0x90, 0xdd, 0x94, 0x1a, 0x01, 0xbd,
  0x6c, 0x5a, 0x5a, 0x89, 0x64, 0x3b, 0x42, 0x93, 0xbd, 0xc4, 0x91, 0xa1,
  0x11, 0x54, 0x3a, 0x75, 0x6c, 0x14, 0xcd, 0xda, 0xbf, 0xfd, 0x88, 0xd4,
  0xc7, 0xd6, 0x84, 0x36, 0xdf, 0x3b, 0xfb, 0xc2, 0x29, 0x41, 0x76, 0x33,
  0xb8, 0x65, 0xe3, 0x44, 0xe7, 0xe7, 0xcf, 0x98, 0x60, 0xe4, 0xff, 0xbe,
  0xae, 0x42, 0x0c, 0x88, 0xef, 0x06, 0xaa, 0x07, 0x22, 0x18, 0xc8, 0x0d,
  0x2a, 0xf3, 0x27, 0xae, 0x22, 0x83, 0x82, 0x8b, 0xd5, 0x0b, 0x24, 0xc9,
  0x67, 0x28, 0x48, 0x3e, 0xeb, 0x71, 0x17, 0xef, 0xe4, 0x7a, 0xa9, 0x7d,
  0xe8, 0x85, 0x1e, 0xab, 0xe2, 0xcb, 0x0d, 0x51, 0xe4, 0xa8, 0x7a, 0x30,
  0x04, 0xdf, 0xdd, 0xd2, 0xbd, 0xd5, 0x2f, 0xda, 0xf3, 0x3b, 0x0f, 0x95,
  0xd0, 0xcb, 0x4a, 0x8a, 0xf8, 0x4c, 0x09, 0xc4, 0xb9, 0x32, 0x7a, 0xa3,
  0x25, 0xf0, 0x69, 0xf2, 0xcb, 0x18, 0x43, 0x11, 0xd3, 0x4d, 0x56, 0x49,
  0x9a, 0x9f, 0x54, 0xb3, 0xf3, 0x4a, 0x0f, 0x93, 0x57, 0xe0, 0x23, 0x98,
  0x13, 0xb3, 0xa4, 0xc4, 0x2e, 0x69, 0x1c, 0x0f, 0xc3, 0x85, 0xed, 0xa7,
  0xe9, 0x48, 0xa3, 0x03, 0xf3, 0x73, 0xee, 0xa2, 0xd4, 0x86, 0xe8, 0xb8,
  0x52, 0xd0, 0x15, 0xc8, 0x55, 0x0d, 0x0f, 0x86, 0xbd, 0xbc, 0x7c, 0x74,
  0x64, 0x8f, 0xb4, 0x10, 0x00, 0xf0, 0xd6, 0x89, 0xb1, 0xde, 0x47, 0xc5,
  0xde, 0x46, 0x3a, 0x41, 0x5d, 0xe8, 0x41, 0x4f, 0x3f, 0xc4, 0x9b, 0x73,
  0x39, 0x3f, 0x4f, 0x96, 0xdf, 0x57, 0x7a, 0xe3, 0xa5, 0x3c, 0xa2, 0x70,
  0xaf, 0xc6, 0x4a, 0x64, 0x97, 0xbf, 0xda, 0xe1, 0x32, 0x4b, 0x24, 0x00,
  0x9d, 0x02, 0x73, 0x9c, 0x40, 0xca, 0x6a, 0x2c, 0x44, 0x6f, 0x94, 0x3e,
  0x6a, 0x60, 0x02, 0x47, 0xfb, 0x18, 0x10, 0x30, 0x69, 0xbe, 0x3b, 0xa1,
  0xe8, 0xe3, 0x3e, 0x0e, 0x4d, 0xde, 0x38, 0xfb, 0x28, 0x14, 0x80, 0x4c,
  0x51, 0xe5, 0x34, 0x3f, 0x82, 0xd4, 0xb8, 0x9c, 0xd1, 0x0d, 0x96, 0x70,
  0x19, 0xbb, 0x49, 0xae, 0xfd, 0x01, 0x9b, 0x05, 0x29, 0xf1, 0x12, 0x1d,
  0x0b, 0xb2, 0xd7, 0xb1, 0xb8, 0xe9, 0xf7, 0x68, 0x93, 0x3e, 0x18, 0xbe,
  0x72, 0xdc, 0x64, 0x3b, 0xff, 0xed, 0x62, 0x82, 0x3f, 0x8e, 0xc7, 0xe2,
  0x29, 0x7b, 0x1e, 0xa8, 0xff, 0x4c, 0x56, 0xb2, 0x24, 0x55, 0x0e, 0x07,
  0xa1, 0x15, 0x0f, 0x59, 0x2b, 0x22, 0x02, 0x22, 0xd1, 0xc0, 0x9a, 0x71,
  0x83, 0x62, 0x16, 0x07, 0x63, 0xaf, 0x6c, 0x49, 0x1c, 0x04, 0xea, 0x1e,
  0x52, 0xf0, 0x91, 0xc4, 0x70, 0x94, 0x95, 0x6c, 0x51, 0x7f, 0x6c, 0x86,
  0x81, 0x7f, 0x0c, 0x2f, 0x1a, 0x34, 0x36, 0xf4, 0x8b, 0x8e, 0x1e, 0xbb,
  0x9b, 0x41, 0xa2, 0x32, 0x05, 0x81, 0xfb, 0x02, 0x2c, 0x3d, 0x33, 0x49,
  0xda, 0x6e, 0x02, 0xde, 0xc4, 0x35, 0x19, 0x2c, 0x20, 0xa1, 0x34, 0xb6,
  0xf5, 0x7f, 0xad, 0xc1, 0xad, 0x2a, 0x86, 0x2e, 0x85, 0xd0, 0xf9, 0xd1,
  0x18, 0x51, 0x36, 0x98, 0xc4, 0xf6, 0xfc, 0xa0, 0xa1, 0xab, 0x5a, 0x17,
  0x7b, 0x2d, 0xe2, 0xa0, 0x9c, 0xca, 0xd0, 0xb3, 0x54, 0xa4, 0x78, 0x81,
  0x59, 0xe7, 0x66, 0x24, 0xb5, 0xc3, 0xa7, 0xdb, 0x45, 0x05, 0x68, 0x3a,
  0x8b, 0x90, 0x93, 0xfd, 0x03, 0x86, 0xe9, 0x03, 0x1a, 0x6d, 0xa2, 0x0d,
  0x0f, 0x9b, 0x17, 0x42, 0xd0, 0x8f, 0x2d, 0x09, 0x44, 0x34, 0x3d, 0xfc,
  0x06, 0x30, 0x84, 0x04, 0xa6, 0x17, 0x68, 0x79, 0x3e, 0x51, 0x99, 0x55,
  0x26, 0xc3, 0x6e, 0x69, 0x78, 0x96, 0xf6, 0x91, 0x2c, 0x89, 0xbb, 0x2e,
  0x32, 0xf3, 0xf3, 0x45, 0x15, 0x20, 0xe1, 0x65, 0x01, 0x67, 0xac, 0x84,
  0xaa, 0x03, 0x73, 0x19, 0x79, 0xdd, 0x9f, 0xbe, 0x60, 0xb3, 0x54, 0xbb,
  0x95, 0xc2, 0xfa, 0xc3, 0xf7, 0x82, 0x4b, 0x2c, 0xbe, 0x8a, 0x42, 0x8f,
  0xd4, 0xb1, 0x6d, 0x82, 0xf9, 0xbf, 0xd2, 0x7d, 0x84, 0x7c, 0xe6, 0x12,
  0xc3, 0x01, 0xcf, 0xe2, 0x76, 0x5e, 0xaa, 0xde, 0xac, 0xc9, 0x17, 0x68,
  0x8c, 0x36, 0x1e, 0xe1, 0x7c, 0x2b, 0x60, 0x0e, 0xa7, 0x1f, 0x50, 0x97,
  0x81, 0x02, 0x2a, 0x16, 0x41, 0x6b, 0x23, 0x38, 0x60, 0xc2, 0x33, 0x2a,
  0x79, 0xa7, 0xb4, 0x81, 0x58, 0x0f, 0xa8, 0x2c, 0xe1, 0x9f, 0xe0, 0x44,
  0xcd, 0x83, 0xac, 0x8f, 0x3e, 0x25, 0xed, 0x72, 0x24, 0xd8, 0x1f, 0x50,
  0x12, 0x1d, 0x8c, 0xe9, 0xd9, 0xa8, 0xf9, 0x93, 0xe6, 0xf7, 0x6f, 0xe0,
  0xfa, 0xf0, 0x6e, 0x20, 0xa2, 0x17, 0xc3, 0x82, 0xd1, 0xb1, 0x77, 0x4f,
  0x6a, 0x7a, 0x4b, 0x41, 0xf5, 0xda, 0xa8, 0xbf, 0xfa, 0x45, 0x78, 0xba,
  0x2d, 0xa4, 0x73, 0x06, 0xd6, 0x85, 0xbb, 0xcd, 0xa9, 0x77, 0x7f, 0x6f,
  0x20, 0x39, 0xdc, 0x42, 0xae, 0x90, 0x2f, 0xe1, 0x4f, 0x21, 0xc9, 0xaf,
  0x72, 0x9f, 0x55, 0x0f, 0x71, 0x11, 0x9c, 0x47, 0xd5, 0xbc, 0x96, 0x56,
  0x9a, 0x17, 0x4a, 0x50, 0x08, 0xff, 0xd9, 0x1c, 0x26, 0xa9, 0x05, 0x5e,
  0x8a, 0x80, 0x90, 0x0e, 0x9f, 0x25, 0x32, 0x50, 0x61, 0x98, 0x4c, 0x71,
  0x5d, 0x35, 0x5e, 0x24, 0x4e, 0xa3, 0x50, 0xf5, 0xde, 0xe7, 0xe0, 0xae,
  0x1b, 0x0c, 0x01, 0x9a, 0x0c, 0xc7, 0x94, 0x59, 0x7e, 0xc6, 0x2d, 0x40,
  0x46, 0x85, 0xc8, 0xd8, 0xec, 0x93, 0x60, 0x7d, 0xb1, 0x64, 0xd4, 0x7b,
  0x35, 0xf3, 0x6a, 0x92, 0x0a, 0x74, 0x36, 0x91, 0x9d, 0xbc, 0x2a, 0x6d,
  0x0d, 0x0d, 0xd1, 0x3a, 0xbc, 0x7e, 0x5e, 0xbf, 0xb7, 0x98, 0x8c, 0x16,
  0xa7, 0x10, 0x58, 0xe0, 0x26, 0x98, 0xb6, 0xf9, 0x84, 0x9c, 0x9b, 0x0a,
  0x6c, 0xbe, 0x45, 0x4f, 0xab, 0x07, 0x43, 0x08, 0x86, 0x8c, 0x5c, 0x86,
  0x45, 0x1c, 0xe1, 0xaa, 0x08, 0x72, 0xae, 0x03, 0x0c, 0x72, 0x72, 0x1d,
  0xb8, 0xc6, 0xa4, 0xd7, 0xbc, 0xed, 0xe1, 0x08, 0x19, 0xfc, 0x36, 0x65,
  0xe7, 0x69, 0x96, 0xa7, 0x43, 0x88, 0xf6, 0xa5, 0xfe, 0xf8, 0x20, 0xf4,
  0xc1, 0xc0, 0xab, 0xcc, 0xc5, 0x0c, 0x13, 0x02, 0x14, 0x50, 0x02, 0x91,
  0x65, 0xc9, 0x63, 0x86, 0x14, 0x22, 0x9f, 0xd3, 0x47, 0x8d, 0xe9, 0x92,
  0xda, 0x0a, 0x17, 0x39, 0x33, 0x0b, 0x7b, 0x95, 0xe1, 0x75, 0xf4, 0x45,
  0xd5, 0xff, 0x04, 0xb8, 0x56, 0xad, 0x9b, 0x4d, 0x4c, 0x80, 0x96, 0x4a,
  0x47, 0x4f, 0x54, 0xe1, 0x93, 0xdb, 0x90, 0x5b, 0x99, 0xc2, 0xcd, 0x7e,
  0xe9, 0xf1, 0x50, 0x6e, 0x93, 0xad, 0x7b, 0xe2, 0xfd, 0x3e, 0x6e, 0x6e,
  0xcc, 0x04, 0x5a, 0xe8
};
unsigned int randbytes_len = 1024;

static const unsigned char ref[SHA256_HASHLEN] =
{
    0x6a, 0x6a, 0xd2, 0x12, 0x06, 0x11, 0xf9, 0xf9, 0x3d, 0x29, 0xcf, 0x86,
    0x33, 0x39, 0x7d, 0x31, 0x80, 0xd4, 0x41, 0x68, 0x82, 0xd1, 0x80, 0x3b,
    0x85, 0xb4, 0xdd, 0xe2, 0xed, 0x46, 0xb6, 0x5c
};

/* Helper: compare C arrays of same type and size. */
#define FAIL_IF_NOT_SAME(type, array1, array2, len)                     \
    do                                                                  \
    {                                                                   \
        std::vector<type> expected((array1), (array1) + (len));         \
        std::vector<type> actual((array2), (array2) + (len));           \
                                                                        \
        FAIL_IF(expected != actual);                                    \
    } while(0)

TEST_CASE("TEST_psSha256Standalone")
{
    unsigned char digest[SHA256_HASHLEN] = { 0 };

    REQUIRE(perform_psCrypto_library_init() == OK);
    psSha256Standalone(randbytes, 1024, digest);

    FAIL_IF_NOT_SAME(uint8_t, digest, ref, sizeof digest);
    perform_psCrypto_library_cleanup();
}

TEST_CASE("TEST_psSha256Final_multipart")
{
    psSha256_t md;
    unsigned char digest[SHA256_HASHLEN] = { 0 };

    REQUIRE(perform_psCrypto_library_init() == OK);
    psSha256PreInit(&md);
    psSha256Init(&md);
    psSha256Update(&md, randbytes, 333);
    psSha256Update(&md, randbytes + 333, 1024 - 333);
    psSha256Final(&md, digest);

    FAIL_IF_NOT_SAME(uint8_t, digest, ref, sizeof digest);
    perform_psCrypto_library_cleanup();
}

TEST_CASE("TEST_psSha256Final_multipart_with_copy")
{
    psSha256_t md;
    psSha256_t md2;
    unsigned char digest[SHA256_HASHLEN] = { 0 };
    unsigned char digest2[SHA256_HASHLEN] = { 0 };

    REQUIRE(perform_psCrypto_library_init() == OK);
    psSha256PreInit(&md);
    psSha256Init(&md);
    psSha256Update(&md, randbytes, 333);
    psSha256Cpy(&md2, &md);
    psSha256Update(&md2, randbytes + 333, 1024 - 333);
    psSha256Update(&md, randbytes + 333, 1024 - 333);
    psSha256Final(&md2, digest2);
    psSha256Final(&md, digest);

    FAIL_IF_NOT_SAME(uint8_t, digest, ref, sizeof digest);
    FAIL_IF_NOT_SAME(uint8_t, digest2, ref, sizeof digest2);
    perform_psCrypto_library_cleanup();
}

TEST_CASE("TEST_psSha256Final_multipart_with_copy9")
{
    psSha256_t md;
    psSha256_t md2;
    psSha256_t md3;
    psSha256_t md4;
    psSha256_t md5;
    psSha256_t md6;
    psSha256_t md7;
    psSha256_t md8;
    psSha256_t md9;
    unsigned char digest[SHA256_HASHLEN] = { 0 };
    unsigned char digest2[SHA256_HASHLEN] = { 0 };
    unsigned char digest3[SHA256_HASHLEN] = { 0 };
    unsigned char digest4[SHA256_HASHLEN] = { 0 };
    unsigned char digest5[SHA256_HASHLEN] = { 0 };
    unsigned char digest6[SHA256_HASHLEN] = { 0 };
    unsigned char digest7[SHA256_HASHLEN] = { 0 };
    unsigned char digest8[SHA256_HASHLEN] = { 0 };
    unsigned char digest9[SHA256_HASHLEN] = { 0 };

    REQUIRE(perform_psCrypto_library_init() == OK);
    psSha256PreInit(&md);
    psSha256Init(&md);
    psSha256Update(&md, randbytes, 333);
    psSha256Cpy(&md2, &md);
    psSha256Cpy(&md3, &md);
    psSha256Cpy(&md4, &md);
    psSha256Cpy(&md5, &md);
    psSha256Cpy(&md6, &md);
    psSha256Cpy(&md7, &md);
    psSha256Cpy(&md8, &md);
    psSha256Cpy(&md9, &md);
    psSha256Update(&md3, randbytes + 333, 1024 - 333);
    psSha256Update(&md4, randbytes + 333, 1024 - 333);
    psSha256Update(&md5, randbytes + 333, 1024 - 333);
    psSha256Update(&md6, randbytes + 333, 1024 - 333);
    psSha256Update(&md7, randbytes + 333, 1024 - 333);
    psSha256Update(&md8, randbytes + 333, 1024 - 333);
    psSha256Update(&md9, randbytes + 333, 1024 - 333);
    psSha256Update(&md2, randbytes + 333, 1024 - 333);
    psSha256Update(&md, randbytes + 333, 1024 - 333);
    psSha256Final(&md3, digest3);
    psSha256Final(&md4, digest4);
    psSha256Final(&md5, digest5);
    psSha256Final(&md6, digest6);
    psSha256Final(&md7, digest7);
    psSha256Final(&md8, digest8);
    psSha256Final(&md9, digest9);
    psSha256Final(&md2, digest2);
    psSha256Final(&md, digest);

    FAIL_IF_NOT_SAME(uint8_t, digest, ref, sizeof digest);
    FAIL_IF_NOT_SAME(uint8_t, digest2, ref, sizeof digest2);
    FAIL_IF_NOT_SAME(uint8_t, digest3, ref, sizeof digest3);
    FAIL_IF_NOT_SAME(uint8_t, digest4, ref, sizeof digest4);
    FAIL_IF_NOT_SAME(uint8_t, digest5, ref, sizeof digest5);
    FAIL_IF_NOT_SAME(uint8_t, digest6, ref, sizeof digest6);
    FAIL_IF_NOT_SAME(uint8_t, digest7, ref, sizeof digest7);
    FAIL_IF_NOT_SAME(uint8_t, digest8, ref, sizeof digest8);
    FAIL_IF_NOT_SAME(uint8_t, digest9, ref, sizeof digest9);
    perform_psCrypto_library_cleanup();
}
