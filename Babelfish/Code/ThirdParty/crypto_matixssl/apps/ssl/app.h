/**
 *      @file    app.h
 *
 *
 *      Header for MatrixSSL example sockets client and server applications.
 */
/*
 *      Copyright (c) 2013-2017 INSIDE Secure Corporation
 *      All Rights Reserved
 *
 *      THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF INSIDE.
 *
 *      Please do not edit this file without first consulting INSIDE support.
 *      Unauthorized changes to this file are not supported by INSIDE.
 *
 *      The copyright notice above does not evidence any actual or intended
 *      publication of such source code.
 *
 *      This Module contains Proprietary Information of INSIDE and should be
 *      treated as Confidential.
 *
 *      The information in this file is provided for the exclusive use of the
 *      licensees of INSIDE. Such users have the right to use, modify,
 *      and incorporate this code into products for purposes authorized by the
 *      license agreement provided they include this notice and the associated
 *      copyright notice with any such product.
 *
 *      The information in this file is provided "AS IS" without warranty.
 */
/******************************************************************************/

#ifndef _h_MATRIXSSLAPP
# define _h_MATRIXSSLAPP

# ifdef __cplusplus
extern "C" {
# endif
/******************************************************************************/

# include "core/coreApi.h"
# include "matrixssl/matrixsslApi.h"

# include "osdep_errno.h"         /* Defines EWOULDBLOCK, etc. */
# include "osdep_fcntl.h"         /* Defines FD_CLOEXEC, etc. */
# include "osdep_stdlib.h"        /* Defines malloc, exit, etc. */

# ifdef POSIX
#  include "osdep_netdb.h"        /* Defines AF_INET, etc. */
#  include "osdep_unistd.h"       /* Defines close() */
#  include "osdep_netinet_tcp.h"  /* Defines TCP_NODELAY, etc. */
#  include <arpa/inet.h>    /* inet_addr */
# endif

# ifdef WIN32
#  define SIGPIPE         SIGABRT
#  define snprintf        _snprintf
#  define close           closesocket
#  define MSG_DONTWAIT    0
#  ifndef EWOULDBLOCK
#   define EWOULDBLOCK     WSAEWOULDBLOCK
#  endif
#  ifndef EINPROGRESS
#   define EINPROGRESS     WSAEINPROGRESS
#  endif
# endif /* WIN32 */

/******************************************************************************/
/*
     Platform independent socket defines for convenience
 */
# ifndef INVALID_SOCKET
#  define INVALID_SOCKET (-1)
typedef int32 SOCKET;
# endif

# ifdef WIN32
#  define SOCKET_ERRNO   WSAGetLastError()
# else
#  define SOCKET_ERRNO   errno
# endif

/******************************************************************************/
/*
    Configuration Options
 */
# define HTTPS_PORT      4433   /* Port to run the server/client on */

/******************************************************************************/
/*
    Protocol specific defines
 */
/* Maximum size of parseable http element. In this case, a HTTP header line. */
# define HTTPS_BUFFER_MAX 256

/* Return codes from http parsing routine */
# define HTTPS_COMPLETE  1               /* Full request/response parsed */
# define HTTPS_PARTIAL   0               /* Only a partial request/response was received */
# define HTTPS_ERROR     MATRIXSSL_ERROR /* Invalid/unsupported HTTP syntax */

typedef struct
{
    DLListEntry List;
    ssl_t *ssl;
    SOCKET fd;
    psTime_t time;              /* Last time there was activity */
    uint32 timeout;             /* in milliseconds*/
    uint32 flags;
    uint32 handshakeComplete;
    unsigned char *parsebuf;    /* Partial data */
    uint32 parsebuflen;
    uint32 bytes_received;
    uint32 bytes_requested;
    uint32 bytes_sent;
    psPool_t *bufPool;          /* Mem pool to allocate inbuf and outbuf */
} httpConn_t;

extern int32 httpBasicParse(httpConn_t *cp, unsigned char *buf, uint32 len,
                            int32 trace);

/******************************************************************************/

# ifdef __cplusplus
}
# endif

#endif /* _h_MATRIXSSLAPP */

/******************************************************************************/
