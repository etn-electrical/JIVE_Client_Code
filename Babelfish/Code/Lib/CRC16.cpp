/**
 *****************************************************************************************
 *	@file
 *	@details See header file for module overview.
 *	@copyright 2013 Eaton Corporation. All Rights Reserved.
 *
 *****************************************************************************************
 */
#include "Includes.h"
#include "CRC16.h"

namespace BF_Lib
{

#if CRC16_VERSION == TABLE_CRC_VERSION_8BIT

const uint8_t CRC16::table_hi[256] =
{
	0x00U, 0x11U, 0x23U, 0x32U, 0x46U, 0x57U, 0x65U, 0x74U,
	0x8cU, 0x9dU, 0xafU, 0xbeU, 0xcaU, 0xdbU, 0xe9U, 0xf8U,
	0x10U, 0x01U, 0x33U, 0x22U, 0x56U, 0x47U, 0x75U, 0x64U,
	0x9cU, 0x8dU, 0xbfU, 0xaeU, 0xdaU, 0xcbU, 0xf9U, 0xe8U,
	0x21U, 0x30U, 0x02U, 0x13U, 0x67U, 0x76U, 0x44U, 0x55U,
	0xadU, 0xbcU, 0x8eU, 0x9fU, 0xebU, 0xfaU, 0xc8U, 0xd9U,
	0x31U, 0x20U, 0x12U, 0x03U, 0x77U, 0x66U, 0x54U, 0x45U,
	0xbdU, 0xacU, 0x9eU, 0x8fU, 0xfbU, 0xeaU, 0xd8U, 0xc9U,
	0x42U, 0x53U, 0x61U, 0x70U, 0x04U, 0x15U, 0x27U, 0x36U,
	0xceU, 0xdfU, 0xedU, 0xfcU, 0x88U, 0x99U, 0xabU, 0xbaU,
	0x52U, 0x43U, 0x71U, 0x60U, 0x14U, 0x05U, 0x37U, 0x26U,
	0xdeU, 0xcfU, 0xfdU, 0xecU, 0x98U, 0x89U, 0xbbU, 0xaaU,
	0x63U, 0x72U, 0x40U, 0x51U, 0x25U, 0x34U, 0x06U, 0x17U,
	0xefU, 0xfeU, 0xccU, 0xddU, 0xa9U, 0xb8U, 0x8aU, 0x9bU,
	0x73U, 0x62U, 0x50U, 0x41U, 0x35U, 0x24U, 0x16U, 0x07U,
	0xffU, 0xeeU, 0xdcU, 0xcdU, 0xb9U, 0xa8U, 0x9aU, 0x8bU,
	0x84U, 0x95U, 0xa7U, 0xb6U, 0xc2U, 0xd3U, 0xe1U, 0xf0U,
	0x08U, 0x19U, 0x2bU, 0x3aU, 0x4eU, 0x5fU, 0x6dU, 0x7cU,
	0x94U, 0x85U, 0xb7U, 0xa6U, 0xd2U, 0xc3U, 0xf1U, 0xe0U,
	0x18U, 0x09U, 0x3bU, 0x2aU, 0x5eU, 0x4fU, 0x7dU, 0x6cU,
	0xa5U, 0xb4U, 0x86U, 0x97U, 0xe3U, 0xf2U, 0xc0U, 0xd1U,
	0x29U, 0x38U, 0x0aU, 0x1bU, 0x6fU, 0x7eU, 0x4cU, 0x5dU,
	0xb5U, 0xa4U, 0x96U, 0x87U, 0xf3U, 0xe2U, 0xd0U, 0xc1U,
	0x39U, 0x28U, 0x1aU, 0x0bU, 0x7fU, 0x6eU, 0x5cU, 0x4dU,
	0xc6U, 0xd7U, 0xe5U, 0xf4U, 0x80U, 0x91U, 0xa3U, 0xb2U,
	0x4aU, 0x5bU, 0x69U, 0x78U, 0x0cU, 0x1dU, 0x2fU, 0x3eU,
	0xd6U, 0xc7U, 0xf5U, 0xe4U, 0x90U, 0x81U, 0xb3U, 0xa2U,
	0x5aU, 0x4bU, 0x79U, 0x68U, 0x1cU, 0x0dU, 0x3fU, 0x2eU,
	0xe7U, 0xf6U, 0xc4U, 0xd5U, 0xa1U, 0xb0U, 0x82U, 0x93U,
	0x6bU, 0x7aU, 0x48U, 0x59U, 0x2dU, 0x3cU, 0x0eU, 0x1fU,
	0xf7U, 0xe6U, 0xd4U, 0xc5U, 0xb1U, 0xa0U, 0x92U, 0x83U,
	0x7bU, 0x6aU, 0x58U, 0x49U, 0x3dU, 0x2cU, 0x1eU, 0x0fU
};

flash uint8_t CRC16::table_lo[256] =
{
	0x00U, 0x89U, 0x12U, 0x9bU, 0x24U, 0xadU, 0x36U, 0xbfU,
	0x48U, 0xc1U, 0x5aU, 0xd3U, 0x6cU, 0xe5U, 0x7eU, 0xf7U,
	0x81U, 0x08U, 0x93U, 0x1aU, 0xa5U, 0x2cU, 0xb7U, 0x3eU,
	0xc9U, 0x40U, 0xdbU, 0x52U, 0xedU, 0x64U, 0xffU, 0x76U,
	0x02U, 0x8bU, 0x10U, 0x99U, 0x26U, 0xafU, 0x34U, 0xbdU,
	0x4aU, 0xc3U, 0x58U, 0xd1U, 0x6eU, 0xe7U, 0x7cU, 0xf5U,
	0x83U, 0x0aU, 0x91U, 0x18U, 0xa7U, 0x2eU, 0xb5U, 0x3cU,
	0xcbU, 0x42U, 0xd9U, 0x50U, 0xefU, 0x66U, 0xfdU, 0x74U,
	0x04U, 0x8dU, 0x16U, 0x9fU, 0x20U, 0xa9U, 0x32U, 0xbbU,
	0x4cU, 0xc5U, 0x5eU, 0xd7U, 0x68U, 0xe1U, 0x7aU, 0xf3U,
	0x85U, 0x0cU, 0x97U, 0x1eU, 0xa1U, 0x28U, 0xb3U, 0x3aU,
	0xcdU, 0x44U, 0xdfU, 0x56U, 0xe9U, 0x60U, 0xfbU, 0x72U,
	0x06U, 0x8fU, 0x14U, 0x9dU, 0x22U, 0xabU, 0x30U, 0xb9U,
	0x4eU, 0xc7U, 0x5cU, 0xd5U, 0x6aU, 0xe3U, 0x78U, 0xf1U,
	0x87U, 0x0eU, 0x95U, 0x1cU, 0xa3U, 0x2aU, 0xb1U, 0x38U,
	0xcfU, 0x46U, 0xddU, 0x54U, 0xebU, 0x62U, 0xf9U, 0x70U,
	0x08U, 0x81U, 0x1aU, 0x93U, 0x2cU, 0xa5U, 0x3eU, 0xb7U,
	0x40U, 0xc9U, 0x52U, 0xdbU, 0x64U, 0xedU, 0x76U, 0xffU,
	0x89U, 0x00U, 0x9bU, 0x12U, 0xadU, 0x24U, 0xbfU, 0x36U,
	0xc1U, 0x48U, 0xd3U, 0x5aU, 0xe5U, 0x6cU, 0xf7U, 0x7eU,
	0x0aU, 0x83U, 0x18U, 0x91U, 0x2eU, 0xa7U, 0x3cU, 0xb5U,
	0x42U, 0xcbU, 0x50U, 0xd9U, 0x66U, 0xefU, 0x74U, 0xfdU,
	0x8bU, 0x02U, 0x99U, 0x10U, 0xafU, 0x26U, 0xbdU, 0x34U,
	0xc3U, 0x4aU, 0xd1U, 0x58U, 0xe7U, 0x6eU, 0xf5U, 0x7cU,
	0x0cU, 0x85U, 0x1eU, 0x97U, 0x28U, 0xa1U, 0x3aU, 0xb3U,
	0x44U, 0xcdU, 0x56U, 0xdfU, 0x60U, 0xe9U, 0x72U, 0xfbU,
	0x8dU, 0x04U, 0x9fU, 0x16U, 0xa9U, 0x20U, 0xbbU, 0x32U,
	0xc5U, 0x4cU, 0xd7U, 0x5eU, 0xe1U, 0x68U, 0xf3U, 0x7aU,
	0x0eU, 0x87U, 0x1cU, 0x95U, 0x2aU, 0xa3U, 0x38U, 0xb1U,
	0x46U, 0xcfU, 0x54U, 0xddU, 0x62U, 0xebU, 0x70U, 0xf9U,
	0x8fU, 0x06U, 0x9dU, 0x14U, 0xabU, 0x22U, 0xb9U, 0x30U,
	0xc7U, 0x4eU, 0xd5U, 0x5cU, 0xe3U, 0x6aU, 0xf1U, 0x78U
};

#elif CRC16_VERSION == TABLE_CRC_VERSION_16BIT

const uint16_t CRC16::table[256] =
{
	0x0000U, 0x1189U, 0x2312U, 0x329bU, 0x4624U, 0x57adU, 0x6536U, 0x74bfU,
	0x8c48U, 0x9dc1U, 0xaf5aU, 0xbed3U, 0xca6cU, 0xdbe5U, 0xe97eU, 0xf8f7U,
	0x1081U, 0x0108U, 0x3393U, 0x221aU, 0x56a5U, 0x472cU, 0x75b7U, 0x643eU,
	0x9cc9U, 0x8d40U, 0xbfdbU, 0xae52U, 0xdaedU, 0xcb64U, 0xf9ffU, 0xe876U,
	0x2102U, 0x308bU, 0x0210U, 0x1399U, 0x6726U, 0x76afU, 0x4434U, 0x55bdU,
	0xad4aU, 0xbcc3U, 0x8e58U, 0x9fd1U, 0xeb6eU, 0xfae7U, 0xc87cU, 0xd9f5U,
	0x3183U, 0x200aU, 0x1291U, 0x0318U, 0x77a7U, 0x662eU, 0x54b5U, 0x453cU,
	0xbdcbU, 0xac42U, 0x9ed9U, 0x8f50U, 0xfbefU, 0xea66U, 0xd8fdU, 0xc974U,
	0x4204U, 0x538dU, 0x6116U, 0x709fU, 0x0420U, 0x15a9U, 0x2732U, 0x36bbU,
	0xce4cU, 0xdfc5U, 0xed5eU, 0xfcd7U, 0x8868U, 0x99e1U, 0xab7aU, 0xbaf3U,
	0x5285U, 0x430cU, 0x7197U, 0x601eU, 0x14a1U, 0x0528U, 0x37b3U, 0x263aU,
	0xdecdU, 0xcf44U, 0xfddfU, 0xec56U, 0x98e9U, 0x8960U, 0xbbfbU, 0xaa72U,
	0x6306U, 0x728fU, 0x4014U, 0x519dU, 0x2522U, 0x34abU, 0x0630U, 0x17b9U,
	0xef4eU, 0xfec7U, 0xcc5cU, 0xddd5U, 0xa96aU, 0xb8e3U, 0x8a78U, 0x9bf1U,
	0x7387U, 0x620eU, 0x5095U, 0x411cU, 0x35a3U, 0x242aU, 0x16b1U, 0x0738U,
	0xffcfU, 0xee46U, 0xdcddU, 0xcd54U, 0xb9ebU, 0xa862U, 0x9af9U, 0x8b70U,
	0x8408U, 0x9581U, 0xa71aU, 0xb693U, 0xc22cU, 0xd3a5U, 0xe13eU, 0xf0b7U,
	0x0840U, 0x19c9U, 0x2b52U, 0x3adbU, 0x4e64U, 0x5fedU, 0x6d76U, 0x7cffU,
	0x9489U, 0x8500U, 0xb79bU, 0xa612U, 0xd2adU, 0xc324U, 0xf1bfU, 0xe036U,
	0x18c1U, 0x0948U, 0x3bd3U, 0x2a5aU, 0x5ee5U, 0x4f6cU, 0x7df7U, 0x6c7eU,
	0xa50aU, 0xb483U, 0x8618U, 0x9791U, 0xe32eU, 0xf2a7U, 0xc03cU, 0xd1b5U,
	0x2942U, 0x38cbU, 0x0a50U, 0x1bd9U, 0x6f66U, 0x7eefU, 0x4c74U, 0x5dfdU,
	0xb58bU, 0xa402U, 0x9699U, 0x8710U, 0xf3afU, 0xe226U, 0xd0bdU, 0xc134U,
	0x39c3U, 0x284aU, 0x1ad1U, 0x0b58U, 0x7fe7U, 0x6e6eU, 0x5cf5U, 0x4d7cU,
	0xc60cU, 0xd785U, 0xe51eU, 0xf497U, 0x8028U, 0x91a1U, 0xa33aU, 0xb2b3U,
	0x4a44U, 0x5bcdU, 0x6956U, 0x78dfU, 0x0c60U, 0x1de9U, 0x2f72U, 0x3efbU,
	0xd68dU, 0xc704U, 0xf59fU, 0xe416U, 0x90a9U, 0x8120U, 0xb3bbU, 0xa232U,
	0x5ac5U, 0x4b4cU, 0x79d7U, 0x685eU, 0x1ce1U, 0x0d68U, 0x3ff3U, 0x2e7aU,
	0xe70eU, 0xf687U, 0xc41cU, 0xd595U, 0xa12aU, 0xb0a3U, 0x8238U, 0x93b1U,
	0x6b46U, 0x7acfU, 0x4854U, 0x59ddU, 0x2d62U, 0x3cebU, 0x0e70U, 0x1ff9U,
	0xf78fU, 0xe606U, 0xd49dU, 0xc514U, 0xb1abU, 0xa022U, 0x92b9U, 0x8330U,
	0x7bc7U, 0x6a4eU, 0x58d5U, 0x495cU, 0x3de3U, 0x2c6aU, 0x1ef1U, 0x0f78U
};

#endif

/*
 *****************************************************************************************
 * See header file for function definition.
 *****************************************************************************************
 */
uint16_t CRC16::Calc_On_Byte( uint8_t new_byte, uint16_t prev_CRC )
{
#if CRC16_VERSION == SHIFT_CRC_VERSION
	uint8_t temp;
	uint16_t temp_crc;
	uint8_t* temp_crc_ptr = reinterpret_cast<uint8_t*>( &temp_crc );

	temp_crc = prev_CRC;

	temp = new_byte ^ temp_crc_ptr[0];
	temp ^= ( temp << 4 );
	temp_crc_ptr[0] = temp_crc_ptr[1] ^ static_cast<uint8_t>( temp << 3U ) ^ ( temp >> 4U );
	temp_crc_ptr[1] = temp ^ ( temp >> 5 );

	return ( temp_crc );

#elif CRC16_VERSION == TABLE_CRC_VERSION_8BIT

	uint16_t temp_crc;
	uint8_t* temp_crc_ptr = reinterpret_cast<uint8_t*>( &temp_crc );
	uint8_t index;

	temp_crc = prev_CRC;

	index = temp_crc_ptr[0] ^ new_byte;
	temp_crc_ptr[0] = temp_crc_ptr[1] ^ table_lo[index];
	temp_crc_ptr[1] = table_hi[index];

	return ( temp_crc );

#elif CRC16_VERSION == TABLE_CRC_VERSION_16BIT

	return ( ( prev_CRC >> 8U ) ^ table[( static_cast<uint8_t>( prev_CRC ) ^ new_byte ) & 0xFFU] );

#endif
}

/*
 *****************************************************************************************
 * See header file for function definition.
 *****************************************************************************************
 */
uint16_t CRC16::Calc_On_String( uint8_t const* data, uint32_t length, uint16_t init_crc )
{
#if CRC16_VERSION == SHIFT_CRC_VERSION

	uint8_t temp;
	uint16_t temp_crc;
	uint8_t* temp_crc_ptr = reinterpret_cast<uint8_t*>( &temp_crc );

	temp_crc = init_crc;

	while ( length > 0U )
	{
		length--;
		temp = *data ^ temp_crc_ptr[0];
		data++;
		temp ^= static_cast<uint8_t>( temp << 4U );
		temp_crc_ptr[0] = temp_crc_ptr[1] ^ static_cast<uint8_t>( temp << 3U ) ^ ( temp >> 4U );
		temp_crc_ptr[1] = temp ^ ( temp >> 5U );
	}

	return ( temp_crc );

#elif CRC16_VERSION == TABLE_CRC_VERSION_8BIT

	uint16_t temp_crc;
	uint8_t* temp_crc_ptr = reinterpret_cast<uint8_t*>( &temp_crc );
	uint_fast8_t index;

	temp_crc = init_crc;

	while ( length > 0U )
	{
		length--;
		index = temp_crc_ptr[0] ^ *data;
		data++;
		temp_crc_ptr[0] = temp_crc_ptr[1] ^ table_lo[index];
		temp_crc_ptr[1] = table_hi[index];
	}

	return ( temp_crc );

#elif CRC16_VERSION == TABLE_CRC_VERSION_16BIT

	uint16_t temp_crc;

	temp_crc = init_crc;

	while ( length > 0U )
	{
		length--;
		temp_crc = ( ( temp_crc >> 8 ) ^
					 table[( static_cast<uint8_t>( temp_crc ) ^ *data ) & 0xFFU] );
		data++;
		// temp_crc = ( temp_crc_ptr[1] ^ table[ ( temp_crc_ptr[0] ^ *data ) & 0xFF ] );
		// data++;
	}

	return ( temp_crc );

#endif
}

}	/* end namespace BF_Lib for this module */
