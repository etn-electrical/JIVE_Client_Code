Attribute VB_Name = "Modbus_LUA_Builder"
'****************************************************************************************************************************
'
'   Create the LUA Definitions for Modbus registers and coils
'
'****************************************************************************************************************************
Private LuaDoc As TextStream
Private Const COMMENT_COL = 80

'****************************************************************************************************************************
'
'   Create LUA Definitions for Modbus registers and coils
'
'****************************************************************************************************************************
Sub Create_Modbus_LUA_Definitions()
    Application.Calculation = xlCalculationManual
    
    Dim file_name As String
    file_name = Get_Modbus_Output_File_Pathname(".lua", "_UNPUB")
    Set fs = CreateObject("Scripting.FileSystemObject")
    Set LuaDoc = fs.CreateTextFile(file_name, True)

    LuaDoc.WriteLine ("--*****************************************************************************************************************************")
    LuaDoc.WriteLine ("-- C445 Modbus Registers.")
    LuaDoc.WriteLine ("--")
    LuaDoc.WriteLine ("--       This file is automatically generated by excel spreadsheet. ")
    LuaDoc.WriteLine ("--       WARNING Do not edit this file, your changes will be over-written!")
    LuaDoc.WriteLine ("--")
    LuaDoc.WriteLine ("-- Created = " & DateTime.Now & " local")
    Dim ident_str_array() As String
    ident_str_array = Modbus_Lookup_Identity_Strings()
    For index = 1 To UBound(ident_str_array) Step 1
        LuaDoc.WriteLine ("-- " & ident_str_array(index))
    Next index
    LuaDoc.WriteLine ("--*****************************************************************************************************************************")
    LuaDoc.WriteLine ("")
    
    Dim desc_sheet_row As Long
    Dim reg_num As Long
    Dim coil_num As Long
    Dim counter As Long
    
    counter = MODBUS_DATA_START_ROW

    While (Cells(counter, MODBUS_DATA_DEFINE_COL).text <> Empty) And (Cells(counter, MODBUS_DATA_DEFINE_COL).text <> BEGIN_IGNORED_DATA)
        desc_sheet_row = Find_DCID_Row(Cells(counter, MODBUS_DATA_DEFINE_COL).text)
        reg_num = Cells(counter, MODBUS_DATA_REG_COL).value + 1
        coil_num = ((reg_num - 1) * 16) + 1

        modbus_reg_def = MySpacify(DCID_Lookup_DCID_Symbol(desc_sheet_row) & " = " & reg_num, COMMENT_COL)
        LuaDoc.WriteLine (modbus_reg_def & " -- " & DCID_Lookup_Short_Description(desc_sheet_row))
        
        If (DCID_Has_Bitfield_Definition(desc_sheet_row)) Then
            Call Emit_Bitfield_Definition(desc_sheet_row, coil_num)
        ElseIf (DCID_Is_Enum(desc_sheet_row)) Then
            Call Emit_Enum(desc_sheet_row)
        ElseIf (DCID_Is_Array(desc_sheet_row)) Then
            Call Emit_Array(desc_sheet_row)
        End If
        
        'LuaDoc.WriteLine ("")
        counter = counter + 1
    Wend

    LuaDoc.WriteLine ("")
    LuaDoc.WriteLine ("--")
    LuaDoc.WriteLine ("--*****************************************************************************************************************************")
    LuaDoc.WriteLine ("--")
    LuaDoc.WriteLine ("")
    counter = MODBUS_DATA_START_ROW

    While (Cells(counter, MODBUS_DATA_DEFINE_COL).text <> Empty) And (Cells(counter, MODBUS_DATA_DEFINE_COL).text <> BEGIN_IGNORED_DATA)
        desc_sheet_row = Find_DCID_Row(Cells(counter, MODBUS_DATA_DEFINE_COL).text)
        Dim bytes As Long
        Dim registers As Long
        bytes = CInt(DCID_Lookup_Length(desc_sheet_row))
        registers = BytesToRegisterCount(bytes)
        count_def = MySpacify("    " & DCID_Lookup_DCID_Symbol(desc_sheet_row) & "_SIZE = " & registers, COMMENT_COL + 4)
        LuaDoc.WriteLine (count_def & " -- Number of registers")
        counter = counter + 1
    Wend

    LuaDoc.WriteLine ("")
    LuaDoc.WriteLine ("--")
    LuaDoc.WriteLine ("--*****************************************************************************************************************************")
    LuaDoc.WriteLine ("--")
    LuaDoc.WriteLine ("")
    LuaDoc.Close

    Application.Calculation = xlCalculationAutomatic
End Sub

'****************************************************************************************************************************
'
'   Emit additional information regarding bitfield registers
'
'****************************************************************************************************************************
Private Sub Emit_Bitfield_Definition(row As Long, first_coil_num As Long)
    Dim coil As Long
    Dim index As Long
    Dim ListItems() As String
    Dim ParsedItems() As String
    Dim TotalEnums As Long
    
    bitfieldlist = DCID_Lookup_Bitfield(row)
    ListItems = Split(bitfieldlist, ITEM_DELIMITER)
    TotalEnums = CInt(ListItems(0))
    For index = 1 To UBound(ListItems) Step 1
        If "" <> Trim(ListItems(index)) Then
            ParsedItems = Split(ListItems(index), SUB_ITEM_DELIMITER)
            'Remove line feeds
            ParsedItems(0) = Replace(ParsedItems(0), vbLf, "")
            ParsedItems(1) = Replace(ParsedItems(1), vbLf, "")
            ParsedItems(2) = Replace(ParsedItems(2), vbLf, "")
            coil = first_coil_num + CInt(ParsedItems(0))
            If coil <= 65535 Then
                coil_def = MySpacify("    " & DCID_Lookup_DCID_Symbol(row) & "__" & ParsedItems(0) & "_COIL = " & coil, COMMENT_COL + 4)
                LuaDoc.WriteLine (coil_def & " -- Bit " & ParsedItems(0) & " : " & ParsedItems(2))
            End If
        End If
    Next index
End Sub

'****************************************************************************************************************************
'
'   Emit additional information regarding enumerated registers
'
'****************************************************************************************************************************
Private Sub Emit_Enum(row As Long)
    Dim index As Long
    Dim ListItems() As String
    Dim ParsedItems() As String
    Dim TotalEnums As Long
    enumlist = DCID_Lookup_Enum(row)
    ListItems = Split(enumlist, ITEM_DELIMITER)
    TotalEnums = CInt(ListItems(0))
    For index = 1 To UBound(ListItems) Step 1
        If "" <> Trim(ListItems(index)) Then
            ParsedItems = Split(ListItems(index), SUB_ITEM_DELIMITER)
            'Remove line feeds
            ParsedItems(0) = Replace(ParsedItems(0), vbLf, "")
            ParsedItems(1) = Replace(ParsedItems(1), vbLf, "")
            ParsedItems(2) = Replace(ParsedItems(2), vbLf, "")
            enum_def = MySpacify("    " & DCID_Lookup_DCID_Symbol(row) & "__" & ParsedItems(1) & "_ENUM = " & ParsedItems(0), COMMENT_COL + 4)
            LuaDoc.WriteLine (enum_def & " -- " & ParsedItems(2))
        End If
    Next index
End Sub

'****************************************************************************************************************************
'
'   Emit additional information regarding enumerated registers
'
'****************************************************************************************************************************
Private Sub Emit_Array(row As Long)
    Dim bytes As Long
    Dim registers As Long
    bytes = CInt(DCID_Lookup_Length(row))
    registers = BytesToRegisterCount(bytes)
    count_def = MySpacify("    " & DCID_Lookup_DCID_Symbol(row) & "__COUNT = " & registers, COMMENT_COL + 4)
    LuaDoc.WriteLine (count_def & " -- Number of registers")
End Sub


'****************************************************************************************************************************
'
'   Adjust whitespace at end of string
'
'****************************************************************************************************************************
Private Function MySpacify(my_string As String, col_pos As Long) As String
    Dim string_len As Long
    Dim space_cnt As Long
    Dim tab_cnt_pos As Long
    Dim num_tabs As Long
    
    MySpacify = my_string
    string_len = Len(my_string)
    
    If (col_pos > string_len) Then
        space_cnt = col_pos - string_len
    Else
        space_cnt = 1
    End If
    
    MySpacify = my_string & Space(space_cnt)

End Function

