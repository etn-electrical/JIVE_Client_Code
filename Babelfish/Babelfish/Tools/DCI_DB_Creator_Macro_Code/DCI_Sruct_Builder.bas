Attribute VB_Name = "DCI_Sruct_Builder"
'***************************************************************
' Main DCI Descriptor struct generator.
'***************************************************************
Sub Create_DCI_Structs()
    
    'Adjust the size of the columns
    Call Column_Size
    
    'Must be run before we turn calcs off because we will rerun the calcs after this operation.
    Call DCI_Struct_Builder_Sheet_Sanity_Check
    
    'Add drop-down menu for the datatype column
    Call Datatype_Dropdown_Menu
    
    Application.Calculation = xlCalculationManual
    
    Dim counter
    Dim nv_max_max_size As Integer
    nv_max_max_size = 0
    Dim temp_default_str As String

    Sheets("DCI Descriptors").Select
    Set fs = CreateObject("Scripting.FileSystemObject")
    file_path = ActiveWorkbook.Path & "\" & Cells(3, 2).value
    Set DCI_DATA_C = fs.CreateTextFile(file_path, True)
    file_path = ActiveWorkbook.Path & "\" & Cells(4, 2).value
    Set DCI_DATA_H = fs.CreateTextFile(file_path, True)


    '******************************
    '* NV Sheet Column and Row definitions.

    TOTAL_DCID_RAM_SIZE_COL = 2
    TOTAL_DCID_RAM_SIZE_ROW = 6

'****************************************************************************************************************************
'******     Fix the functions in cells which are commonly broken.
'****************************************************************************************************************************
    counter = DCI_DEFINES_START_ROW
    While Cells(counter, DCI_DEFINES_COL).text <> Empty
        ' Fix the length formula  INDIRECT("R9C79",FALSE)
        Cells(counter, DATATYPE_SIZE).value = "=IF(ISERROR(VLOOKUP(C" & counter & ",Defines!$A$7:$B$21,2,FALSE)), """",VLOOKUP(C" & counter & ",Defines!$A$7:$B$21,2,FALSE))"
        ' Fix the description length calculations.
        Cells(counter, DCI_SHORT_DESC_LEN_COL).value = "=IF(INDIRECT(""R" & counter & "C" & DCI_DEFINES_COL & """,FALSE)="""","""",LEN(INDIRECT(""R" & counter & "C" & DCI_SHORT_DESC_COL & """,FALSE) ) )"
        Cells(counter, DCI_LONG_DESC_LEN_COL).value = "=IF(INDIRECT(""R" & counter & "C" & DCI_DEFINES_COL & """,FALSE)="""","""",LEN(INDIRECT(""R" & counter & "C" & DCI_LONG_DESC_COL & """,FALSE) ) )"
        Cells(counter, DCI_UNITS_DESC_LEN_COL).value = "=IF(INDIRECT(""R" & counter & "C" & DCI_DEFINES_COL & """,FALSE)="""","""",LEN(INDIRECT(""R" & counter & "C" & DCI_UNITS_DESC_COL & """,FALSE) ) )"
        counter = counter + 1
    Wend
    Range(Cells(DCI_DEFINES_START_ROW, READ_ONLY_VAL_ATTRIB_COL), Cells(counter, PATRON_ENUM_VAL_ACCESS_COL)).HorizontalAlignment = xlCenter
    Range(Cells(DCI_DEFINES_START_ROW, DATATYPE_SIZE), Cells(counter, DATA_ENUM_COL)).HorizontalAlignment = xlCenter
    Range(Cells(DCI_DEFINES_START_ROW, DATA_DESCRIPTION_COL), Cells(counter, DATA_DESCRIPTION_COL)).Rows.RowHeight = 13.5
    Range(Cells(DCI_DEFINES_START_ROW, DCI_SHORT_DESC_LEN_COL), Cells(counter, DCI_SHORT_DESC_LEN_COL)).HorizontalAlignment = xlCenter
    Range(Cells(DCI_DEFINES_START_ROW, DCI_LONG_DESC_LEN_COL), Cells(counter, DCI_LONG_DESC_LEN_COL)).HorizontalAlignment = xlCenter
    Range(Cells(DCI_DEFINES_START_ROW, DCI_UNITS_DESC_LEN_COL), Cells(counter, DCI_UNITS_DESC_LEN_COL)).HorizontalAlignment = xlCenter
    
    ' We turn on auto calc then turn it back off again to catch any of the changes made above.
    Application.Calculation = xlCalculationAutomatic
    Application.Calculation = xlCalculationManual


'****************************************************************************************************************************
'******     Start Creating the .H file header
'****************************************************************************************************************************
    DCI_DATA_H.WriteLine ("/**")
    DCI_DATA_H.WriteLine ("*****************************************************************************************")
    DCI_DATA_H.WriteLine ("*   @file")
    DCI_DATA_H.WriteLine ("*")
    DCI_DATA_H.WriteLine ("*   @brief This file is the autogenerated DCI Database definition.")
    DCI_DATA_H.WriteLine ("*")
    DCI_DATA_H.WriteLine ("*   @details")
    DCI_DATA_H.WriteLine ("*")
    DCI_DATA_H.WriteLine ("*   @version")
    DCI_DATA_H.WriteLine ("*   C++ Style Guide Version 1.0")
    DCI_DATA_H.WriteLine ("*")
    DCI_DATA_H.WriteLine ("*   @copyright " & Get_Year() & " Eaton Corporation. All Rights Reserved.")
    DCI_DATA_H.WriteLine ("*")
    DCI_DATA_H.WriteLine ("*****************************************************************************************")
    DCI_DATA_H.WriteLine ("*/")
    DCI_DATA_H.WriteLine ("#ifndef DCI_DATA_H")
    DCI_DATA_H.WriteLine ("  #define DCI_DATA_H")


'****************************************************************************************************************************
'******     Create Data Center ID List and count the number of data items
'****************************************************************************************************************************
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("#include ""DCI_Defines.h""")
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("//*******************************************************")
    DCI_DATA_H.WriteLine ("//******     All the data ID's are listed below")
    DCI_DATA_H.WriteLine ("//*******************************************************")
    DCI_DATA_H.WriteLine ("")
    counter = DCI_DEFINES_START_ROW
    total_ram_size = 0
    total_data_items = 0
    While Cells(counter, DCI_DEFINES_COL).text <> Empty
        DCI_DATA_H.WriteLine ("static const DCI_ID_TD " & Cells(counter, DCI_DEFINES_COL).text & "_DCID = " & total_data_items & "U;")
        If (Cells(counter, READ_ONLY_VAL_ATTRIB_COL).text = Empty) Then
            total_ram_size = total_ram_size + Cells(counter, TOTAL_LENGTH_COL).value
        End If
        total_data_items = total_data_items + 1
        counter = counter + 1
    Wend
    DCI_DATA_H.WriteLine ("static const DCI_ID_TD DCI_TOTAL_DCIDS = " & total_data_items & "U;")
    DCI_DATA_H.WriteLine ("")
    Cells(TOTAL_DCID_RAM_SIZE_ROW, TOTAL_DCID_RAM_SIZE_COL).value = total_ram_size
    DCI_DATA_H.WriteLine ("static const uint32_t DCI_TOTAL_DCID_RAM_SIZE = " & (total_ram_size + 16) & "U;  //total DCI data in bytes with 16 byte extra")

'****************************************************************************************************************************
'******     The Extern of the Data List
'****************************************************************************************************************************
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("extern const DCI_DATA_BLOCK_TD dci_data_blocks[DCI_TOTAL_DCIDS];")
    DCI_DATA_H.WriteLine ("")
    
'****************************************************************************************************************************
'******     The Typedef for Enum Value
'****************************************************************************************************************************
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("//*******************************************************")
    DCI_DATA_H.WriteLine ("//******     Typedef for Enum Values")
    DCI_DATA_H.WriteLine ("//*******************************************************")
    DCI_DATA_H.WriteLine ("")
    
    Dim enum_type_max As Boolean
    enum_datatype = "int8_t"
    datatype_string = ""
    enum_type_max = False
    counter = DCI_DEFINES_START_ROW
    While (Cells(counter, DCI_DEFINES_COL).text <> Empty) And (enum_type_max = False)
        If Cells(counter, ENUM_ATTRIB_COL).text <> Empty Then
        datatype_string = Get_Datatype_String(Cells(counter, DCI_DATATYPE_COL).text)
            If (datatype_string <> "uint8_t") And (datatype_string <> "int8_t") Then
                If (datatype_string = "uint64_t") Or (datatype_string = "int64_t") Then
                    enum_datatype = "int64_t"
                    enum_type_max = True
                ElseIf (datatype_string = "uint32_t") Or (datatype_string = "int32_t") Then
                    enum_datatype = "int32_t"
                ElseIf (enum_datatype <> "uint32_t") And (enum_datatype <> "int32_t") Then
                    enum_datatype = "int16_t"
                End If
            End If
        End If
        counter = counter + 1
    Wend
    DCI_DATA_H.WriteLine ("typedef " & enum_datatype & " enum_val_t;")

'****************************************************************************************************************************
'******     The Typedef for Bitfield Value
'****************************************************************************************************************************
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("//*******************************************************")
    DCI_DATA_H.WriteLine ("//******     Typedef for Bitfield Values")
    DCI_DATA_H.WriteLine ("//*******************************************************")
    DCI_DATA_H.WriteLine ("")
    
    Dim bitfield_type_max As Boolean
    BITFIELD_COL = "K"
    bitfield_datatype = "uint8_t"
    datatype_string = ""
    bitfield_type_max = False
    counter = DCI_DEFINES_START_ROW
    While (Cells(counter, DCI_DEFINES_COL).text <> Empty) And (bitfield_type_max = False)
        If Cells(counter, BITFIELD_COL).text <> Empty Then
        datatype_string = Get_Datatype_String(Cells(counter, DCI_DATATYPE_COL).text)
            If datatype_string <> "uint8_t" Then
                If datatype_string = "uint64_t" Then
                    bitfield_datatype = "uint64_t"
                    bitfield_type_max = True
                ElseIf datatype_string = "uint32_t" Then
                    bitfield_datatype = "uint32_t"
                ElseIf bitfield_datatype <> "uint32_t" Then
                    bitfield_datatype = "uint16_t"
                End If
            End If
        End If
        counter = counter + 1
    Wend
    DCI_DATA_H.WriteLine ("typedef " & bitfield_datatype & " bitfield_val_t;")
'****************************************************************************************************************************
'******     The Empty pointer location defines
'****************************************************************************************************************************
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("//*******************************************************")
    DCI_DATA_H.WriteLine ("//******     Unused Pointer Defines")
    DCI_DATA_H.WriteLine ("//*******************************************************")
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("static const DCI_NV_LOC_TD DCI_DATA_NO_NV_MEM_DATA = static_cast<DCI_NV_LOC_TD>( ~static_cast<DCI_NV_LOC_TD>( 0U ) ); ")
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("")
    
    lengths_const = True
    counter = DCI_DEFINES_START_ROW
    While Cells(counter, DCI_DEFINES_COL).text <> Empty
        If (Cells(counter, RW_LENGTH_ATTRIB_COL).text <> Empty) Then
            lengths_const = False
        End If
        counter = counter + 1
    Wend
    
    If (lengths_const = True) Then
        DCI_DATA_H.WriteLine ("///Tells the DCI that the lengths are all constant and it can optimize the access methods.")
        DCI_DATA_H.WriteLine ("#define DCI_ALL_LENGTHS_CONST")
    End If
    
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("")

    
    



'****************************************************************************************************************************
'****************************************************************************************************************************
'****************************************************************************************************************************
'******     Start Creating the .C file
'****************************************************************************************************************************
'****************************************************************************************************************************
'****************************************************************************************************************************





'****************************************************************************************************************************
'******     Start Creating the .C file header
'****************************************************************************************************************************
    DCI_DATA_C.WriteLine ("/*")
    DCI_DATA_C.WriteLine ("*****************************************************************************************")
    DCI_DATA_C.WriteLine ("*   @file")
    DCI_DATA_C.WriteLine ("*   @details See header file for module overview.")
    DCI_DATA_C.WriteLine ("*   @copyright " & Get_Year() & " Eaton Corporation. All Rights Reserved.")
    DCI_DATA_C.WriteLine ("*")
    DCI_DATA_C.WriteLine ("*****************************************************************************************")
    DCI_DATA_C.WriteLine ("*/")
    DCI_DATA_C.WriteLine ("#include ""Includes.h""")
    DCI_DATA_C.WriteLine ("#include ""DCI_Data.h""")
    DCI_DATA_C.WriteLine ("#include ""NV_Address.h""")
    DCI_DATA_C.WriteLine ("#include ""DCI_Constants.h""")
    
'****************************************************************************************************************************
'******     Static Variable
'****************************************************************************************************************************

    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    DCI_DATA_C.WriteLine ("//******     Static Variables")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("static const bool True = TRUE;")
    DCI_DATA_C.WriteLine ("static const bool False = FALSE;")
        
'****************************************************************************************************************************
'******     Create the Ram based variable
'****************************************************************************************************************************
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    DCI_DATA_C.WriteLine ("//******     The Ram Value")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    Dim def_data_type_string As String
    Dim def_data_type_check As String
    Dim def_data_dec_str As String
    Dim def_comma_string As String
    Dim def_comma_count As Integer
    Dim def_data_str As String
        Dim def_result_string As String
    Dim coma_string As String
    DCI_DATA_C.WriteLine ("")
    max_data_type_counter = 11
     ' to arrange in descending order of datatypes
    datatype_counter = 0
    While datatype_counter < max_data_type_counter
        If datatype_counter = 0 Then
            def_data_type_check = "float64_t"
        ElseIf datatype_counter = 1 Then
            def_data_type_check = "uint64_t"
        ElseIf datatype_counter = 2 Then
            def_data_type_check = "int64_t"
        ElseIf datatype_counter = 3 Then
            def_data_type_check = "float32_t"
        ElseIf datatype_counter = 4 Then
            def_data_type_check = "uint32_t"
        ElseIf datatype_counter = 5 Then
            def_data_type_check = "int32_t"
        ElseIf datatype_counter = 6 Then
            def_data_type_check = "uint16_t"
        ElseIf datatype_counter = 7 Then
            def_data_type_check = "int16_t"
        ElseIf datatype_counter = 8 Then
            def_data_type_check = "uint8_t"
        ElseIf datatype_counter = 9 Then
            def_data_type_check = "int8_t"
        ElseIf datatype_counter = 10 Then
            def_data_type_check = "dci_bool_t"
        End If
                counter = DCI_DEFINES_START_ROW
            While Cells(counter, DCI_DEFINES_COL).text <> Empty
                    def_data_type_str = Get_Datatype_String(Cells(counter, DCI_DATATYPE_COL).text)
                    If (Cells(counter, READ_ONLY_VAL_ATTRIB_COL).text = Empty) Then
                        If (Cells(counter, DEFAULT_VAL_ATTRIB_COL).text <> Empty) Then
                            If (def_data_type_check = def_data_type_str) Then
                                def_data_dec_str = "static " & Get_Datatype_String(Cells(counter, DCI_DATATYPE_COL).text) & " "
                                def_comma_string = Replace(Cells(counter, DATA_DEFAULT_COL).text, "0x", "")
                                def_comma_count = Len(Cells(counter, DATA_DEFAULT_COL).text) - Len(def_comma_string)  ' Count the number of 0x to identify hex.
                                    If (Cells(counter, DCI_ARRAY_COUNT_COL).text <> Empty) Then     ' If this is an array of elements.
                                        def_comma_string = Replace(Cells(counter, DATA_DEFAULT_COL).text, ",", "")
                                        def_comma_count = Len(Cells(counter, DATA_DEFAULT_COL).text) - Len(def_comma_string)  ' Count the number of commas
                                        def_paren_string = Replace(Cells(counter, DATA_DEFAULT_COL).text, """", "")
                                        def_paren_count = Len(Cells(counter, DATA_DEFAULT_COL).text) - Len(def_paren_string)  ' Count the number of parenthesis
                                        DCI_DATA_C.WriteLine (def_data_dec_str & _
                                                                Cells(counter, DCI_DEFINES_COL).text & "_RAM[" & _
                                                                Cells(counter, DCI_ARRAY_COUNT_COL).text & "] = ")
                                        def_data_str = Cells(counter, DATA_DEFAULT_COL).Value2
                                        If (def_comma_count + def_paren_count) > 0 Then 'Then the string is already full of all initiators.  Don't create duplicates for the array.
                                                    DCI_DATA_C.WriteLine ("        " & Suffixed_String(Cells(counter, DCI_DATATYPE_COL).text, def_data_str) & ";")
                                        ElseIf (IsNumeric(def_data_str) = False) And (Left(def_data_str, 2) <> "0x") Then
                                                    DCI_DATA_C.WriteLine ("        " & Suffixed_String(Cells(counter, DCI_DATATYPE_COL).text, def_data_str) & ";")
                                        Else
                                            coma_string = ""
                                            def_result_string = "{"
                                            For i = 1 To Cells(counter, DCI_ARRAY_COUNT_COL).text
                                            def_result_string = def_result_string & coma_string & Cells(counter, DATA_DEFAULT_COL).text
                                            coma_string = ", "
                                            Next i
                                            def_result_string = def_result_string & "}"
                                            DCI_DATA_C.WriteLine ("        " & Suffixed_String(Cells(counter, DCI_DATATYPE_COL).text, def_result_string) & ";")
                                        End If
                                    Else
                                        DCI_DATA_C.WriteLine (def_data_dec_str & _
                                                        Cells(counter, DCI_DEFINES_COL).text & "_RAM = " & _
                                                        Suffixed_String(Cells(counter, DCI_DATATYPE_COL).text, Cells(counter, DATA_DEFAULT_COL).Value2) & ";")
                                    End If
                            End If
                        Else
                            If (def_data_type_check = def_data_type_str) Then
                                def_data_dec_str = "static " & Get_Datatype_String(Cells(counter, DCI_DATATYPE_COL).text) & " "
                                    If (Cells(counter, DCI_ARRAY_COUNT_COL).text <> Empty) Then     ' If this is an array of elements.
                                        DCI_DATA_C.WriteLine (def_data_dec_str & _
                                                                Cells(counter, DCI_DEFINES_COL).text & "_RAM[" & _
                                                                Cells(counter, DCI_ARRAY_COUNT_COL).text & "];")
                                    Else
                                        DCI_DATA_C.WriteLine (def_data_dec_str & _
                                                        Cells(counter, DCI_DEFINES_COL).text & "_RAM;")
                                    End If
                            End If
                        End If
                    End If
                        counter = counter + 1
            Wend
        datatype_counter = datatype_counter + 1
    Wend

'****************************************************************************************************************************
'******     Create the Callback Block index
'****************************************************************************************************************************
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    DCI_DATA_C.WriteLine ("//******     The Callback Handler index")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    counter = DCI_DEFINES_START_ROW
        DCI_CALLBACK_ARRAY_SIZE = 0
    While Cells(counter, DCI_DEFINES_COL).text <> Empty
        If (Cells(counter, CALLBACK_ATTRIB_COL).text <> Empty) Then
            DCI_DATA_C.WriteLine ("static const DCI_CBACK_INDEX_TD " & Cells(counter, DCI_DEFINES_COL).text & "_CBACK_INDEX = " & DCI_CALLBACK_ARRAY_SIZE & "U;")
            DCI_CALLBACK_ARRAY_SIZE = DCI_CALLBACK_ARRAY_SIZE + 1
        End If
        counter = counter + 1
    Wend
     
'****************************************************************************************************************************
'******     The Callback handler total index defines
'****************************************************************************************************************************
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("//*******************************************************")
    DCI_DATA_H.WriteLine ("//******     Total CBACK Array Size Defines")
    DCI_DATA_H.WriteLine ("//*******************************************************")
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("static const DCI_CBACK_INDEX_TD TOTAL_CBACK_ARRAY_SIZE = " & DCI_CALLBACK_ARRAY_SIZE & "U;")
    DCI_DATA_H.WriteLine ("extern DCI_CBACK_BLOCK_TD  DCI_CBACK_ARRAY[TOTAL_CBACK_ARRAY_SIZE];")
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("")

'****************************************************************************************************************************
'******     Create the Callback Block index
'****************************************************************************************************************************
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    DCI_DATA_C.WriteLine ("//******     The Callback Block")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    counter = DCI_DEFINES_START_ROW
    counter1 = 0
        DCI_DATA_C.WriteLine ("DCI_CBACK_BLOCK_TD  DCI_CBACK_ARRAY[TOTAL_CBACK_ARRAY_SIZE] = {")
    While Cells(counter, DCI_DEFINES_COL).text <> Empty
        If (Cells(counter, CALLBACK_ATTRIB_COL).text <> Empty) Then
            DCI_DATA_C.WriteLine ("{")
            DCI_DATA_C.WriteLine ("    nullptr,       //Callback Nulled")
            DCI_DATA_C.WriteLine ("    nullptr,       //Callback Param Nulled")
            DCI_DATA_C.WriteLine ("    static_cast<DCI_CB_MSK_TD>( 0U )        //Callback Mask")
            If counter1 < (DCI_CALLBACK_ARRAY_SIZE - 1) Then
                DCI_DATA_C.WriteLine ("},")
            Else
                DCI_DATA_C.WriteLine ("}")
            End If
            counter1 = counter1 + 1
        End If
        counter = counter + 1
    Wend
        DCI_DATA_C.WriteLine ("};")
        
'****************************************************************************************************************************
'******     Create the Range Block index
'****************************************************************************************************************************
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    DCI_DATA_C.WriteLine ("//******     The Range block index")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    counter = DCI_DEFINES_START_ROW
        DCI_RANGE_ARRAY_SIZE = 0
    While Cells(counter, DCI_DEFINES_COL).text <> Empty
        If (Cells(counter, RANGE_ATTRIB_COL).text <> Empty) Or _
                (Cells(counter, ENUM_ATTRIB_COL).text <> Empty) Then
            DCI_DATA_C.WriteLine ("static const DCI_RANGE_DATA_INDEX_TD " & Cells(counter, DCI_DEFINES_COL).text & "_RANGE_INDEX = " & DCI_RANGE_ARRAY_SIZE & "U;")
            DCI_RANGE_ARRAY_SIZE = DCI_RANGE_ARRAY_SIZE + 1
        End If
        counter = counter + 1
    Wend
        
'****************************************************************************************************************************
'******     The Range Block total index defines
'****************************************************************************************************************************
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("//*******************************************************")
    DCI_DATA_H.WriteLine ("//******     Total Range Block Array Size Defines")
    DCI_DATA_H.WriteLine ("//*******************************************************")
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("static const DCI_RANGE_DATA_INDEX_TD TOTAL_RANGE_ARRAY_SIZE = " & DCI_RANGE_ARRAY_SIZE & "U;")
    DCI_DATA_H.WriteLine ("extern const DCI_RANGE_BLOCK  DCI_RANGE_BLOCK_ARRAY[TOTAL_RANGE_ARRAY_SIZE];")
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("")
        
                
'****************************************************************************************************************************
'******     Create the Enum count
'****************************************************************************************************************************
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    DCI_DATA_C.WriteLine ("//******     The Enum count")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    Dim temp_enum_string As String
    Dim enum_str_len  As Integer
        DCI_ENUM_COUNT_ARRAY_SIZE = 0
    counter = DCI_DEFINES_START_ROW
    While Cells(counter, DCI_DEFINES_COL).text <> Empty
        If (Cells(counter, RANGE_ATTRIB_COL).text <> Empty) Or _
        (Cells(counter, ENUM_ATTRIB_COL).text <> Empty) Then
            If Cells(counter, ENUM_ATTRIB_COL).text <> Empty Then
                ' Find the number of enum elements that are in the list.
                ' This requires scanning through the string counting the commas.
                temp_enum_string = Replace(Cells(counter, DATA_ENUM_COL).text, ",", "")
                enum_str_len = Len(Cells(counter, DATA_ENUM_COL).text) - Len(temp_enum_string) + 1
                DCI_DATA_C.WriteLine ("static const DCI_ENUM_COUNT_TD " & Cells(counter, DCI_DEFINES_COL).text & _
                                                                           "_ENUM_COUNT = " & enum_str_len & "U;")
                        DCI_ENUM_COUNT_ARRAY_SIZE = DCI_ENUM_COUNT_ARRAY_SIZE + 1
            End If
        End If
                counter = counter + 1
    Wend

'****************************************************************************************************************************
'******     Create the Enum count array defines
'****************************************************************************************************************************
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("//*******************************************************")
    DCI_DATA_H.WriteLine ("//******     Total Enum Count Array Size Defines")
    DCI_DATA_H.WriteLine ("//*******************************************************")
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("static const DCI_ENUM_COUNT_TD TOTAL_ENUM_COUNT_ARRAY_SIZE = " & DCI_ENUM_COUNT_ARRAY_SIZE & "U;")
    DCI_DATA_H.WriteLine ("extern const DCI_ENUM_COUNT_TD  DCI_ENUM_COUNT_ARRAY[TOTAL_ENUM_COUNT_ARRAY_SIZE];")
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("")

'****************************************************************************************************************************
'******     Create the Enum index
'****************************************************************************************************************************
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    DCI_DATA_C.WriteLine ("//******     The Enum index")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    counter = DCI_DEFINES_START_ROW
    DCI_ENUM_SIZE = 0
    While Cells(counter, DCI_DEFINES_COL).text <> Empty
        If (Cells(counter, RANGE_ATTRIB_COL).text <> Empty) Or _
        (Cells(counter, ENUM_ATTRIB_COL).text <> Empty) Then
            If Cells(counter, ENUM_ATTRIB_COL).text <> Empty Then
                DCI_DATA_C.WriteLine ("static const DCI_ENUM_INDEX_TD " & Cells(counter, DCI_DEFINES_COL).text & _
                                                                           "_ENUM_INDEX = " & DCI_ENUM_SIZE & "U;")
                DCI_ENUM_SIZE = DCI_ENUM_SIZE + 1
            End If
        End If
                counter = counter + 1
    Wend
    
'****************************************************************************************************************************
'******     Create the Enum Count Array
'****************************************************************************************************************************
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    DCI_DATA_C.WriteLine ("//******     The Enum count array")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    counter = DCI_DEFINES_START_ROW
    counter1 = 0
    DCI_DATA_C.WriteLine ("const DCI_ENUM_COUNT_TD  DCI_ENUM_COUNT_ARRAY[TOTAL_ENUM_COUNT_ARRAY_SIZE] = {")
    While Cells(counter, DCI_DEFINES_COL).text <> Empty
        If (Cells(counter, RANGE_ATTRIB_COL).text <> Empty) Or _
        (Cells(counter, ENUM_ATTRIB_COL).text <> Empty) Then
            If Cells(counter, ENUM_ATTRIB_COL).text <> Empty Then
                 If counter1 < (DCI_ENUM_COUNT_ARRAY_SIZE - 1) Then
                    DCI_DATA_C.WriteLine ("     " & Cells(counter, DCI_DEFINES_COL).text & "_ENUM_COUNT,")
                 Else
                    DCI_DATA_C.WriteLine ("     " & Cells(counter, DCI_DEFINES_COL).text & "_ENUM_COUNT")
                 End If
                 counter1 = counter1 + 1
            End If
        End If
            counter = counter + 1
    Wend
    DCI_DATA_C.WriteLine ("};")
        
'****************************************************************************************************************************
'******     Create the Enum list
'****************************************************************************************************************************
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    DCI_DATA_C.WriteLine ("//******     The Enum list")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    Dim const_string As String
        max_data_type_counter = 11
     ' to arrange in descending order of datatypes
    datatype_counter = 0
    While datatype_counter < max_data_type_counter
        If datatype_counter = 0 Then
            def_data_type_check = "float64_t"
        ElseIf datatype_counter = 1 Then
            def_data_type_check = "uint64_t"
        ElseIf datatype_counter = 2 Then
            def_data_type_check = "int64_t"
        ElseIf datatype_counter = 3 Then
            def_data_type_check = "float32_t"
        ElseIf datatype_counter = 4 Then
            def_data_type_check = "uint32_t"
        ElseIf datatype_counter = 5 Then
            def_data_type_check = "int32_t"
        ElseIf datatype_counter = 6 Then
            def_data_type_check = "uint16_t"
        ElseIf datatype_counter = 7 Then
            def_data_type_check = "int16_t"
        ElseIf datatype_counter = 8 Then
            def_data_type_check = "uint8_t"
        ElseIf datatype_counter = 9 Then
            def_data_type_check = "int8_t"
        ElseIf datatype_counter = 10 Then
            def_data_type_check = "dci_bool_t"
        End If
                
        counter = DCI_DEFINES_START_ROW
        While Cells(counter, DCI_DEFINES_COL).text <> Empty
                        If (Cells(counter, RW_RANGE_ATTRIB_COL).text <> Empty) Then
                const_string = "static "
            Else
                const_string = "static const "
            End If
                        If (Cells(counter, RANGE_ATTRIB_COL).text <> Empty) Or _
                                (Cells(counter, ENUM_ATTRIB_COL).text <> Empty) Then
                                If Cells(counter, ENUM_ATTRIB_COL).text <> Empty Then
                                        def_data_type_string = Get_Datatype_String(Cells(counter, DCI_DATATYPE_COL).text)
                                        If def_data_type_string = def_data_type_check Then
                        Dim enum_string As String
                        enum_string = Suffixed_String(Cells(counter, DCI_DATATYPE_COL).text, Cells(counter, DATA_ENUM_COL).text)
                        enum_string = Replace(enum_string, "{", "")
                        enum_string = Replace(enum_string, "}", "")
                        DCI_DATA_C.WriteLine (const_string & Get_Datatype_String(Cells(counter, DCI_DATATYPE_COL).text) & _
                                   "  " & Cells(counter, DCI_DEFINES_COL).text & "_ENUM_LIST[" & _
                                   Cells(counter, DCI_DEFINES_COL).text & "_ENUM_COUNT" & "] = ")
                                                DCI_DATA_C.WriteLine ("    { " & enum_string & " };")
                                        End If
                                End If
                        End If
            counter = counter + 1
        Wend
                datatype_counter = datatype_counter + 1
    Wend

'****************************************************************************************************************************
'******     Create the Enum block array defines
'****************************************************************************************************************************
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("//*******************************************************")
    DCI_DATA_H.WriteLine ("//******     Total Enum Block Array Size Defines")
    DCI_DATA_H.WriteLine ("//*******************************************************")
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("extern const DCI_ENUM_BLOCK  DCI_ENUM_BLOCK_ARRAY[TOTAL_ENUM_COUNT_ARRAY_SIZE];")
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("")
    DCI_DATA_H.WriteLine ("#endif")
    
'****************************************************************************************************************************
'******     Create the Enum blocks
'****************************************************************************************************************************
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    DCI_DATA_C.WriteLine ("//******     The Range/Enum Block")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    
    counter1 = 0
    counter = DCI_DEFINES_START_ROW
    DCI_DATA_C.WriteLine ("const DCI_ENUM_BLOCK  DCI_ENUM_BLOCK_ARRAY[TOTAL_ENUM_COUNT_ARRAY_SIZE] = {")
    While Cells(counter, DCI_DEFINES_COL).text <> Empty
            If (Cells(counter, RANGE_ATTRIB_COL).text <> Empty) Or _
                (Cells(counter, ENUM_ATTRIB_COL).text <> Empty) Then
                        If Cells(counter, ENUM_ATTRIB_COL).text <> Empty Then
                                DCI_DATA_C.WriteLine ("{")
                                DCI_DATA_C.WriteLine ("    reinterpret_cast<DCI_ENUM_LIST_TD const*>( " & Cells(counter, DCI_DEFINES_COL).text & "_ENUM_LIST )")
                            If counter1 < (DCI_ENUM_COUNT_ARRAY_SIZE - 1) Then
                                DCI_DATA_C.WriteLine ("},")
                            Else
                                DCI_DATA_C.WriteLine ("}")
                            End If
                            counter1 = counter1 + 1
                        End If
            End If
        counter = counter + 1
    Wend
    DCI_DATA_C.WriteLine ("};")

        
'****************************************************************************************************************************
'******     Create the Range/Enum min and max attribute
'****************************************************************************************************************************
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    DCI_DATA_C.WriteLine ("//******     The Range/Enum Block min and max attribute")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    
    max_data_type_counter = 11
     ' to arrange in descending order of datatypes
    datatype_counter = 0
    While datatype_counter < max_data_type_counter
        If datatype_counter = 0 Then
            def_data_type_check = "float64_t"
        ElseIf datatype_counter = 1 Then
            def_data_type_check = "uint64_t"
        ElseIf datatype_counter = 2 Then
            def_data_type_check = "int64_t"
        ElseIf datatype_counter = 3 Then
            def_data_type_check = "float32_t"
        ElseIf datatype_counter = 4 Then
            def_data_type_check = "uint32_t"
        ElseIf datatype_counter = 5 Then
            def_data_type_check = "int32_t"
        ElseIf datatype_counter = 6 Then
            def_data_type_check = "uint16_t"
        ElseIf datatype_counter = 7 Then
            def_data_type_check = "int16_t"
        ElseIf datatype_counter = 8 Then
            def_data_type_check = "uint8_t"
        ElseIf datatype_counter = 9 Then
            def_data_type_check = "int8_t"
        ElseIf datatype_counter = 10 Then
            def_data_type_check = "dci_bool_t"
        End If
        counter = DCI_DEFINES_START_ROW
                While Cells(counter, DCI_DEFINES_COL).text <> Empty
                        If (Cells(counter, RANGE_ATTRIB_COL).text <> Empty) Or _
                                        (Cells(counter, ENUM_ATTRIB_COL).text <> Empty) Then
                                If (Cells(counter, RW_RANGE_ATTRIB_COL).text <> Empty) Then
                                                const_string = "static "
                                Else
                                                const_string = "static const "
                                End If
                                
                                ' Write the Min value, max value and enum list.
                                def_data_type_string = Get_Datatype_String(Cells(counter, DCI_DATATYPE_COL).text)
                                If def_data_type_string = def_data_type_check Then
                                    If Cells(counter, DATA_MIN_COL).text <> Empty Then
                                            DCI_DATA_C.WriteLine (const_string & Get_Datatype_String(Cells(counter, DCI_DATATYPE_COL).text) & _
                                                                 "  " & Cells(counter, DCI_DEFINES_COL).text & "_MIN_ATTRIB = " & _
                                                                 Suffixed_String(Cells(counter, DCI_DATATYPE_COL).text, Cells(counter, DATA_MIN_COL).Value2) & ";")
                                    End If
                                    If Cells(counter, DATA_MAX_COL).text <> Empty Then
                                                    DCI_DATA_C.WriteLine (const_string & Get_Datatype_String(Cells(counter, DCI_DATATYPE_COL).text) & _
                                                                    "  " & Cells(counter, DCI_DEFINES_COL).text & "_MAX_ATTRIB = " & _
                                                                    Suffixed_String(Cells(counter, DCI_DATATYPE_COL).text, Cells(counter, DATA_MAX_COL).Value2) & ";")
                                    End If
                                End If
                        End If
                        counter = counter + 1
                Wend
                datatype_counter = datatype_counter + 1
        Wend
                
'****************************************************************************************************************************
'******     Create the Range/Enum Blocks Array
'****************************************************************************************************************************
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    DCI_DATA_C.WriteLine ("//******     The Range/Enum Block Array")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    counter = DCI_DEFINES_START_ROW
        counter1 = 0
        'Create the structure that contains pointers to the min, max, enum data defined above.
    DCI_DATA_C.WriteLine ("const DCI_RANGE_BLOCK DCI_RANGE_BLOCK_ARRAY[TOTAL_RANGE_ARRAY_SIZE]= {")
    While Cells(counter, DCI_DEFINES_COL).text <> Empty
        If (Cells(counter, RANGE_ATTRIB_COL).text <> Empty) Or _
                (Cells(counter, ENUM_ATTRIB_COL).text <> Empty) Then
            DCI_DATA_C.WriteLine ("{")

            If (Cells(counter, DATA_MIN_COL).text <> Empty) And _
                            (Cells(counter, DATA_MAX_COL).text <> Empty) Then
                DCI_DATA_C.WriteLine ("    reinterpret_cast<DCI_RANGE_DATA_TD const*>( &" & Cells(counter, DCI_DEFINES_COL).text & "_MIN_ATTRIB ),")
                DCI_DATA_C.WriteLine ("    reinterpret_cast<DCI_RANGE_DATA_TD const*>( &" & Cells(counter, DCI_DEFINES_COL).text & "_MAX_ATTRIB ),")
            Else
                DCI_DATA_C.WriteLine ("    nullptr,")
                DCI_DATA_C.WriteLine ("    nullptr,")
            End If
                        If Cells(counter, DATA_ENUM_COL).text <> Empty Then
                                                        DCI_DATA_C.WriteLine ("    " & Cells(counter, DCI_DEFINES_COL).text & "_ENUM_INDEX")
                                                        
                        Else
                            DCI_DATA_C.WriteLine ("    0xFFFF // no index allocated")
                        End If
                        If counter1 < (DCI_RANGE_ARRAY_SIZE - 1) Then
                                DCI_DATA_C.WriteLine ("},")
                        Else
                                DCI_DATA_C.WriteLine ("}")
                        End If
                        counter1 = counter1 + 1
                End If
                counter = counter + 1
        Wend
        DCI_DATA_C.WriteLine ("};")
        
'****************************************************************************************************************************
'******     Create the Default Blocks
'****************************************************************************************************************************
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    DCI_DATA_C.WriteLine ("//******     The Default Block")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    
    max_data_type_counter = 11
    datatype_counter = 0
    While datatype_counter < max_data_type_counter
    ' to arrange in descending order of datatypes
        If datatype_counter = 0 Then
            def_data_type_check = "float64_t"
        ElseIf datatype_counter = 1 Then
            def_data_type_check = "uint64_t"
        ElseIf datatype_counter = 2 Then
            def_data_type_check = "int64_t"
        ElseIf datatype_counter = 3 Then
            def_data_type_check = "float32_t"
        ElseIf datatype_counter = 4 Then
            def_data_type_check = "uint32_t"
        ElseIf datatype_counter = 5 Then
            def_data_type_check = "int32_t"
        ElseIf datatype_counter = 6 Then
            def_data_type_check = "uint16_t"
        ElseIf datatype_counter = 7 Then
            def_data_type_check = "int16_t"
        ElseIf datatype_counter = 8 Then
            def_data_type_check = "uint8_t"
        ElseIf datatype_counter = 9 Then
            def_data_type_check = "int8_t"
        ElseIf datatype_counter = 10 Then
            def_data_type_check = "dci_bool_t"
        End If
                
        counter = DCI_DEFINES_START_ROW
            While Cells(counter, DCI_DEFINES_COL).text <> Empty
                    If ((Cells(counter, DEFAULT_VAL_ATTRIB_COL).text <> Empty) Or (Cells(counter, READ_ONLY_VAL_ATTRIB_COL).text <> Empty)) And (Cells(counter, DATA_DEFAULT_COL).text <> Empty) Then
                                def_data_type_str = Get_Datatype_String(Cells(counter, DCI_DATATYPE_COL).text)
                        If (Cells(counter, RW_DEFAULT_VAL_ATTRIB_COL).text <> Empty) Then       'Check to see if we need to allocate ram for the default val.
                            If (def_data_type_check = def_data_type_str) Then
                                def_data_dec_str = "static " & Get_Datatype_String(Cells(counter, DCI_DATATYPE_COL).text) & " "
                            End If
                        Else
                            If (def_data_type_check = def_data_type_str) Then
                                def_data_dec_str = "static const " & Get_Datatype_String(Cells(counter, DCI_DATATYPE_COL).text) & " "
                            End If
                        End If
                                
                        def_comma_string = Replace(Cells(counter, DATA_DEFAULT_COL).text, "0x", "")
                        def_comma_count = Len(Cells(counter, DATA_DEFAULT_COL).text) - Len(def_comma_string)  ' Count the number of 0x to identify hex.
                            If (def_data_type_check = def_data_type_str) Then
                                If (Cells(counter, DCI_ARRAY_COUNT_COL).text <> Empty) Then     ' If this is an array of elements.
                                        def_comma_string = Replace(Cells(counter, DATA_DEFAULT_COL).text, ",", "")
                                        def_comma_count = Len(Cells(counter, DATA_DEFAULT_COL).text) - Len(def_comma_string)  ' Count the number of commas
                                        def_paren_string = Replace(Cells(counter, DATA_DEFAULT_COL).text, """", "")
                                        def_paren_count = Len(Cells(counter, DATA_DEFAULT_COL).text) - Len(def_paren_string)  ' Count the number of parenthesis
                                        
                                        DCI_DATA_C.WriteLine (def_data_dec_str & _
                                                                           Cells(counter, DCI_DEFINES_COL).text & "_DEFAULT_ATTRIB[" & _
                                                                           Cells(counter, DCI_ARRAY_COUNT_COL).text & "] = ")
                                        def_data_str = Cells(counter, DATA_DEFAULT_COL).Value2
                                        

                                        If (def_comma_count + def_paren_count) > 0 Then 'Then the string is already full of all initiators.  Don't create duplicates for the array.
                                                DCI_DATA_C.WriteLine ("        " & Suffixed_String(Cells(counter, DCI_DATATYPE_COL).text, def_data_str) & ";")
                                        ElseIf (IsNumeric(def_data_str) = False) And (Left(def_data_str, 2) <> "0x") Then
                                                DCI_DATA_C.WriteLine ("        " & Suffixed_String(Cells(counter, DCI_DATATYPE_COL).text, def_data_str) & ";")
                                        Else
                                                Dim def_out_string As String
                                                Dim comma_string As String
                                                comma_string = ""
                                                def_out_string = "{"
                                                For i = 1 To Cells(counter, DCI_ARRAY_COUNT_COL).text
                                                        def_out_string = def_out_string & comma_string & Cells(counter, DATA_DEFAULT_COL).text
                                                        comma_string = ", "
                                                Next i
                                                def_out_string = def_out_string & "}"
                                                DCI_DATA_C.WriteLine ("        " & Suffixed_String(Cells(counter, DCI_DATATYPE_COL).text, def_out_string) & ";")
                                        End If
                                Else
                                        DCI_DATA_C.WriteLine (def_data_dec_str & _
                                                        Cells(counter, DCI_DEFINES_COL).text & "_DEFAULT_ATTRIB = " & _
                                                        Suffixed_String(Cells(counter, DCI_DATATYPE_COL).text, Cells(counter, DATA_DEFAULT_COL).Value2) & ";")
                                End If
                            End If
                    End If
                counter = counter + 1
            Wend
        datatype_counter = datatype_counter + 1
    Wend
'****************************************************************************************************************************
'******     Create the Length
'****************************************************************************************************************************
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    DCI_DATA_C.WriteLine ("//******     Length Data Definitions")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    DCI_DATA_C.WriteLine ("")
    counter = DCI_DEFINES_START_ROW
    While Cells(counter, DCI_DEFINES_COL).text <> Empty
        If (Cells(counter, RW_LENGTH_ATTRIB_COL).text <> Empty) Then
            DCI_DATA_C.WriteLine ("DCI_LENGTH_TD  " & Cells(counter, DCI_DEFINES_COL).text & "_LENGTH = " & _
                        Cells(counter, TOTAL_LENGTH_COL).text & "U;")
        Else
            DCI_DATA_C.WriteLine ("static const DCI_LENGTH_TD  " & Cells(counter, DCI_DEFINES_COL).text & "_LENGTH = " & _
                        Cells(counter, TOTAL_LENGTH_COL).text & "U;")
        End If
        counter = counter + 1
    Wend



'****************************************************************************************************************************
'******     Create the Static Attrib Block Pointers
'****************************************************************************************************************************
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    DCI_DATA_C.WriteLine ("//******     Create the Mother Data Block Structure")
    DCI_DATA_C.WriteLine ("//*******************************************************")
    DCI_DATA_C.WriteLine ("const DCI_DATA_BLOCK_TD dci_data_blocks[DCI_TOTAL_DCIDS] = ")
    DCI_DATA_C.WriteLine ("{")
    counter = DCI_DEFINES_START_ROW
    While Cells(counter, DCI_DEFINES_COL).text <> Empty
        DCI_DATA_C.WriteLine ("    {" & "        // " & Cells(counter, DATA_DESCRIPTION_COL).text)

        '********************************
        ' Define the NVLoc.
        If (Cells(counter, INITIAL_VAL_ATTRIB_COL).text <> Empty) Then
            DCI_DATA_C.WriteLine ("        " & Cells(counter, DCI_DEFINES_COL).text & "_NVADD,        //Not Default")
        Else
            DCI_DATA_C.WriteLine ("        DCI_DATA_NO_NV_MEM_DATA,")
        End If

        '********************************
        ' Define the Ram Pointer and the length.
        If (Cells(counter, READ_ONLY_VAL_ATTRIB_COL).text = Empty) Then
            If (Cells(counter, DCI_ARRAY_COUNT_COL).text <> Empty) Then
                   DCI_DATA_C.WriteLine ("        reinterpret_cast<DCI_RAM_DATA_TD *>( " & Cells(counter, DCI_DEFINES_COL).text & "_RAM ),")      ' Ram pointer
            Else
                   DCI_DATA_C.WriteLine ("        reinterpret_cast<DCI_RAM_DATA_TD *>( &" & Cells(counter, DCI_DEFINES_COL).text & "_RAM ),")      ' Ram pointer
            End If
        Else ' Ram pointer to read only value
            If (Cells(counter, DCI_ARRAY_COUNT_COL).text <> Empty) Then
                DCI_DATA_C.WriteLine ("        const_cast<DCI_RAM_DATA_TD *>( reinterpret_cast<DCI_DEF_DATA_TD const*>( " & Cells(counter, DCI_DEFINES_COL).text & "_DEFAULT_ATTRIB )),")
            Else
                DCI_DATA_C.WriteLine ("        const_cast<DCI_RAM_DATA_TD *>( reinterpret_cast<DCI_DEF_DATA_TD const*>( &" & Cells(counter, DCI_DEFINES_COL).text & "_DEFAULT_ATTRIB )),")
            End If
        End If
        
        DCI_DATA_C.WriteLine ("        &" & Cells(counter, DCI_DEFINES_COL).text & "_LENGTH,")          ' Length

        '********************************
        ' Define the Default definition block.
        If ((Cells(counter, DEFAULT_VAL_ATTRIB_COL).text <> Empty) Or (Cells(counter, READ_ONLY_VAL_ATTRIB_COL).text <> Empty)) And (Cells(counter, DATA_DEFAULT_COL).text <> Empty) Then
            If (Cells(counter, DCI_ARRAY_COUNT_COL).text <> Empty) Then
                DCI_DATA_C.WriteLine ("        reinterpret_cast<DCI_DEF_DATA_TD const*>( " & Cells(counter, DCI_DEFINES_COL).text & "_DEFAULT_ATTRIB ),")
            Else
                DCI_DATA_C.WriteLine ("        reinterpret_cast<DCI_DEF_DATA_TD const*>( &" & Cells(counter, DCI_DEFINES_COL).text & "_DEFAULT_ATTRIB ),")
            End If
        Else
            DCI_DATA_C.WriteLine ("        nullptr,")
        End If
        
        '********************************
        ' Define the Data Center ID
        DCI_DATA_C.WriteLine ("        " & Cells(counter, DCI_DEFINES_COL).text & "_DCID,")      ' Ram pointer pointer
        
        '********************************
        ' Define the Owner Attribute Info Bits.
        AIA_string = ""

        DCI_DATA_C.WriteLine ("        ( ")

        add_an_OR = False
        none_defined = True
        If (Cells(counter, READ_ONLY_VAL_ATTRIB_COL).text <> Empty) Then
            AIA_string = AIA_string & " ( DCI_OWNER_ATTRIB_INFO_READ_ONLY_MASK )"
            add_an_OR = True
            none_defined = False
        End If

        If (Cells(counter, INITIAL_VAL_ATTRIB_COL).text <> Empty) Then
            If add_an_OR = True Then
                AIA_string = AIA_string & " | "
                DCI_DATA_C.WriteLine ("            " & AIA_string)
               AIA_string = ""
            End If
            AIA_string = AIA_string & " ( DCI_OWNER_ATTRIB_INFO_INIT_VAL_MASK )"
            add_an_OR = True
            none_defined = False
        End If

        If (Cells(counter, DEFAULT_VAL_ATTRIB_COL).text <> Empty) Then
            If add_an_OR = True Then
                AIA_string = AIA_string & " | "
                DCI_DATA_C.WriteLine ("            " & AIA_string)
               AIA_string = ""
            End If
            AIA_string = AIA_string & " ( DCI_OWNER_ATTRIB_INFO_DEFAULT_VAL_MASK )"
            add_an_OR = True
            none_defined = False
        End If

        If (Cells(counter, RW_DEFAULT_VAL_ATTRIB_COL).text <> Empty) Then
            If add_an_OR = True Then
                AIA_string = AIA_string & " | "
                DCI_DATA_C.WriteLine ("            " & AIA_string)
               AIA_string = ""
            End If
            AIA_string = AIA_string & " ( DCI_OWNER_ATTRIB_INFO_RW_DEFAULT_VAL_MASK )"
            add_an_OR = True
            none_defined = False
        End If

        If (Cells(counter, RANGE_ATTRIB_COL).text <> Empty) Then
            If add_an_OR = True Then
                AIA_string = AIA_string & " | "
                DCI_DATA_C.WriteLine ("            " & AIA_string)
               AIA_string = ""
            End If
            AIA_string = AIA_string & " ( DCI_OWNER_ATTRIB_INFO_RANGE_VAL_MASK )"
            add_an_OR = True
            none_defined = False
        End If
        
        If (Cells(counter, ENUM_ATTRIB_COL).text <> Empty) Then
            If add_an_OR = True Then
                AIA_string = AIA_string & " | "
                DCI_DATA_C.WriteLine ("            " & AIA_string)
               AIA_string = ""
            End If
            AIA_string = AIA_string & " ( DCI_OWNER_ATTRIB_INFO_ENUM_VAL_MASK )"
            add_an_OR = True
            none_defined = False
        End If

        If (Cells(counter, RW_ENUM_ATTRIB_COL).text <> Empty) Then
            If add_an_OR = True Then
                AIA_string = AIA_string & " | "
                DCI_DATA_C.WriteLine ("            " & AIA_string)
               AIA_string = ""
            End If
            AIA_string = AIA_string & " ( DCI_OWNER_ATTRIB_INFO_RW_ENUM_VAL_MASK )"
            add_an_OR = True
            none_defined = False
        End If

        If (Cells(counter, RW_RANGE_ATTRIB_COL).text <> Empty) Then
            If add_an_OR = True Then
                AIA_string = AIA_string & " | "
                DCI_DATA_C.WriteLine ("            " & AIA_string)
               AIA_string = ""
            End If
            AIA_string = AIA_string & " ( DCI_OWNER_ATTRIB_INFO_RW_RANGE_VAL_MASK )"
            add_an_OR = True
            none_defined = False
        End If
        
        If (Cells(counter, CALLBACK_ATTRIB_COL).text <> Empty) Then
           If add_an_OR = True Then
               AIA_string = AIA_string & " | "
               DCI_DATA_C.WriteLine ("            " & AIA_string)
              AIA_string = ""
           End If
           AIA_string = AIA_string & " ( DCI_OWNER_ATTRIB_INFO_CALLBACK_MASK )"
           add_an_OR = True
           none_defined = False
        End If
        
        If (Cells(counter, RW_LENGTH_ATTRIB_COL).text <> Empty) Then
           If add_an_OR = True Then
               AIA_string = AIA_string & " | "
               DCI_DATA_C.WriteLine ("            " & AIA_string)
              AIA_string = ""
           End If
           AIA_string = AIA_string & " ( DCI_OWNER_ATTRIB_INFO_RW_LENGTH_MASK )"
           add_an_OR = True
           none_defined = False
        End If
        
        If (Cells(counter, APP_ONLY_ATTRIB_COL).text <> Empty) Then
           If add_an_OR = True Then
               AIA_string = AIA_string & " | "
               DCI_DATA_C.WriteLine ("            " & AIA_string)
              AIA_string = ""
           End If
           AIA_string = AIA_string & " ( DCI_OWNER_ATTRIB_INFO_APP_PARAM_MASK )"
           add_an_OR = True
           none_defined = False
        End If
        
        If none_defined = True Then
            DCI_DATA_C.WriteLine ("            0U")
        Else
            DCI_DATA_C.WriteLine ("            " & AIA_string)
        End If
        DCI_DATA_C.WriteLine ("        ),")

        '********************************
        ' Define the Patron Attribute Info Bits.
        AIA_string = ""

        DCI_DATA_C.WriteLine ("        ( ")

        add_an_OR = False
        none_defined = True
        If (Cells(counter, PATRON_RAM_VAL_WRITEABLE_COL).text <> Empty) And _
                (Cells(counter, READ_ONLY_VAL_ATTRIB_COL).text = Empty) Then
            AIA_string = AIA_string & " ( DCI_PATRON_ATTRIB_RAM_WR_DATA_MASK )"
            add_an_OR = True
            none_defined = False
        End If

        If (Cells(counter, PATRON_INIT_VAL_READ_ACCESS_COL).text <> Empty) And _
                (Cells(counter, INITIAL_VAL_ATTRIB_COL).text <> Empty) Then
            If add_an_OR = True Then
                AIA_string = AIA_string & " | "
                DCI_DATA_C.WriteLine ("            " & AIA_string)
               AIA_string = ""
            End If
            AIA_string = AIA_string & " ( DCI_PATRON_ATTRIB_NVMEM_DATA_MASK )"
            add_an_OR = True
            none_defined = False
        End If

        If (Cells(counter, PATRON_INIT_VAL_WRITEABLE_ACCESS_COL).text <> Empty) And _
                (Cells(counter, INITIAL_VAL_ATTRIB_COL).text <> Empty) Then
            If add_an_OR = True Then
                AIA_string = AIA_string & " | "
                DCI_DATA_C.WriteLine ("            " & AIA_string)
               AIA_string = ""
            End If
            AIA_string = AIA_string & " ( DCI_PATRON_ATTRIB_NVMEM_WR_DATA_MASK )"
            add_an_OR = True
            none_defined = False
        End If

        If (Cells(counter, PATRON_DEFAULT_VAL_READ_ACCESS_COL).text <> Empty) And _
                (Cells(counter, DEFAULT_VAL_ATTRIB_COL).text <> Empty) Then
            If add_an_OR = True Then
                AIA_string = AIA_string & " | "
                DCI_DATA_C.WriteLine ("            " & AIA_string)
               AIA_string = ""
            End If
            AIA_string = AIA_string & " ( DCI_PATRON_ATTRIB_DEFAULT_DATA_MASK )"
            add_an_OR = True
            none_defined = False
        End If

        If (Cells(counter, PATRON_RANGE_VAL_ACCESS_COL).text <> Empty) And _
                (Cells(counter, RANGE_ATTRIB_COL).text <> Empty) Then
            If add_an_OR = True Then
                AIA_string = AIA_string & " | "
                DCI_DATA_C.WriteLine ("            " & AIA_string)
               AIA_string = ""
            End If
            AIA_string = AIA_string & " ( DCI_PATRON_ATTRIB_RANGE_DATA_MASK )"
            add_an_OR = True
            none_defined = False
        End If
        
        If (Cells(counter, PATRON_ENUM_VAL_ACCESS_COL).text <> Empty) And _
                (Cells(counter, ENUM_ATTRIB_COL).text <> Empty) Then
            If add_an_OR = True Then
                AIA_string = AIA_string & " | "
                DCI_DATA_C.WriteLine ("            " & AIA_string)
               AIA_string = ""
            End If
            AIA_string = AIA_string & " ( DCI_PATRON_ATTRIB_ENUM_DATA_MASK )"
            add_an_OR = True
            none_defined = False
        End If
        
        If none_defined = True Then
            DCI_DATA_C.WriteLine ("            0U")
        Else
            DCI_DATA_C.WriteLine ("            " & AIA_string)
        End If
        DCI_DATA_C.WriteLine ("        ),")

        '********************************
        ' Define the Callback Block index.
        If (Cells(counter, CALLBACK_ATTRIB_COL).text <> Empty) Then
            DCI_DATA_C.WriteLine ("        " & Cells(counter, DCI_DEFINES_COL).text & "_CBACK_INDEX,        //Not Default")
        Else
            DCI_DATA_C.WriteLine ("        0xFFFF,    //No Callback index Allocated.")
        End If
        
        '********************************
        ' Define the Range definition block.
        If (Cells(counter, RANGE_ATTRIB_COL).text <> Empty) Or (Cells(counter, ENUM_ATTRIB_COL).text <> Empty) Then
            DCI_DATA_C.WriteLine ("        " & Cells(counter, DCI_DEFINES_COL).text & "_RANGE_INDEX,        //Not Default")
        Else
            DCI_DATA_C.WriteLine ("        0xFFFF, //No range block index Allocated.")
        End If

        '********************************
        ' Define the Datatype
        DCI_DATA_C.WriteLine ("        " & Cells(counter, DCI_DATATYPE_COL).text & ",")
                
        '********************************
        ' Define the end of the struct
        DCI_DATA_C.WriteLine ("    },")

        counter = counter + 1
    Wend
    DCI_DATA_C.WriteLine ("};")
    
    DCI_DATA_C.Close
    DCI_DATA_H.Close

    Application.Calculation = xlCalculationAutomatic

End Sub

Public Function Get_Datatype_Size(my_s As String) As Integer

    If (my_s = "DCI_DTYPE_BOOL") Or (my_s = "DCI_DTYPE_SINT8") Or (my_s = "DCI_DTYPE_UINT8") Or _
                        (my_s = "DCI_DTYPE_BYTE") Or (my_s = DCI_DTYPE_STRING8) Then
        Get_Datatype_Size = 1
    ElseIf (my_s = "DCI_DTYPE_SINT16") Or (my_s = "DCI_DTYPE_UINT16") Or (my_s = "DCI_DTYPE_WORD") Then
        Get_Datatype_Size = 2
    ElseIf (my_s = "DCI_DTYPE_SINT32") Or (my_s = "DCI_DTYPE_UINT32") Or (my_s = "DCI_DTYPE_FLOAT") Or (my_s = "DCI_DTYPE_DWORD") Then
        Get_Datatype_Size = 4
    ElseIf (my_s = "DCI_DTYPE_DFLOAT") Or (my_s = "DCI_DTYPE_UINT64") Or (my_s = "DCI_DTYPE_SINT64") Then
        Get_Datatype_Size = 8
    End If

End Function
Public Function Get_Datatype_String(my_s As String) As String

    If (my_s = "DCI_DTYPE_BOOL") Then
        Get_Datatype_String = "dci_bool_t"
    ElseIf (my_s = "DCI_DTYPE_UINT8") Or (my_s = "DCI_DTYPE_BYTE") Or (my_s = "DCI_DTYPE_STRING8") Then
        Get_Datatype_String = "uint8_t"
    ElseIf (my_s = "DCI_DTYPE_SINT8") Then
        Get_Datatype_String = "int8_t"
    ElseIf (my_s = "DCI_DTYPE_UINT16") Or (my_s = "DCI_DTYPE_WORD") Then
        Get_Datatype_String = "uint16_t"
    ElseIf (my_s = "DCI_DTYPE_SINT16") Then
        Get_Datatype_String = "int16_t"
    ElseIf (my_s = "DCI_DTYPE_UINT32") Or (my_s = "DCI_DTYPE_DWORD") Then
        Get_Datatype_String = "uint32_t"
    ElseIf (my_s = "DCI_DTYPE_UINT64") Then
        Get_Datatype_String = "uint64_t"
    ElseIf (my_s = "DCI_DTYPE_SINT32") Then
        Get_Datatype_String = "int32_t"
    ElseIf (my_s = "DCI_DTYPE_SINT64") Then
        Get_Datatype_String = "int64_t"
    ElseIf (my_s = "DCI_DTYPE_FLOAT") Then
        Get_Datatype_String = "float32_t"
    ElseIf (my_s = "DCI_DTYPE_DFLOAT") Then
        Get_Datatype_String = "float64_t"
    End If

End Function

Sub Column_Size()
    Columns("C:C").EntireColumn.AutoFit
    Columns("D:D").EntireColumn.AutoFit
    Columns("E:E").EntireColumn.AutoFit
    Columns("F:F").EntireColumn.AutoFit
    Columns("G:G").WrapText = True
    Columns("H:H").EntireColumn.AutoFit
    Columns("I:I").EntireColumn.AutoFit
    Columns("J:J").Hidden = True
    Columns("CB:CB").EntireColumn.AutoFit
    Columns("CD:CD").EntireColumn.AutoFit
    Columns("CF:CF").EntireColumn.AutoFit
    Worksheets("DCI Descriptors").Range("A:DA").Font.name = "Arial"
    Worksheets("DCI Descriptors").Range("A:DA").Font.Size = 10
End Sub

Sub Datatype_Dropdown_Menu()
    With Sheets("DCI Descriptors").Range(Cells(DCI_DEFINES_START_ROW, DCI_DATATYPE_COL), Cells(DCI_DEFINES_START_ROW, DCI_DATATYPE_COL).End(xlDown).End(xlDown)).Validation
            .Delete
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
            Operator:=xlBetween, Formula1:="=Defines!$A$7:$A$21"
            .IgnoreBlank = True
            .InCellDropdown = True
            .InputTitle = ""
            .ErrorTitle = ""
            .InputMessage = ""
            .ErrorMessage = ""
            .ShowInput = True
            .ShowError = False
    End With
End Sub
