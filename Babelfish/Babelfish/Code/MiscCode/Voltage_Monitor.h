/**
 *****************************************************************************************
 *	@file
 *
 *	@brief This monitors the voltage generated by a Voltage_Divider module.
 *
 *	@details The behavior that is possible could be the running voltage, above the running,
 *	below the running voltage, the threshold and the below threshold values.
 *
 *	@copyright 2014 Eaton Corporation. All Rights Reserved.
 *
 *****************************************************************************************
 */
#ifndef VOLTAGE_MONITOR_H
#define VOLTAGE_MONITOR_H

#include "Timers_Lib.h"

namespace BF_Misc
{
class Voltage_Divider;

/*
 **************************************************************************************************
 * @brief Voltage_Monitor monitors the voltage generated by a Voltage_Divider module.
 * @details Behaves as shown below,
 * +++++++++++++++++++++++++++++++++++++++
 * ++++RUNNING_OR_ABOVE_RUNNING+++++++++++
 * +++++++++++++++++++++++++++++++++++++++
 * ####################################### - Running Voltage
 * +++++++++++++++++++++++++++++++++++++++
 * ++++BELOW_RUNNING_ABOVE_LOW_THRESH+++++
 * +++++++++++++++++++++++++++++++++++++++
 * ####################################### - Low Voltage Threshold
 * +++++++++++++++++++++++++++++++++++++++
 * ++++++++++BELOW_LOW_THRESH+++++++++++++
 * +++++++++++++++++++++++++++++++++++++++
   --------------------------------------------------------------------------------------------------
 */
class Voltage_Monitor
{
	public:

		/// This provides the possible states of the voltages.
		typedef enum VoltageState__t
		{
			UNKNOWN,
			RUNNING_OR_ABOVE_RUNNING,
			BELOW_RUNNING_ABOVE_LOW_THRESH,
			BELOW_LOW_THRESH
		} VoltageState_t;

		/**
		 * @brief Callback prototype for any voltage State change notification.
		 * @param[in] voltState: Current Voltage State
		 * @param[in] CurVolt: Current Voltage
		 */
		typedef void (* VoltMonCallBack_t)( VoltageState_t voltState, uint16_t CurVolt );

		/**
		 * @brief Constructor
		 * @param[in] pVoltDivider: Point to voltage divider
		 * @param[in] nLowThreshVolt: Low voltage threshold in mV
		 * @param[in] nRunningVolt: Running/Operational voltage in mV
		 * @param[in] pCallback: Callback to receive any notifications when voltage state changes
		 * @param[in] checkInterval: Rate at which the voltage is refreshed in milliseconds
		 */
		Voltage_Monitor( Voltage_Divider* pVoltDivider, uint16_t nLowThreshVolt,
						 uint16_t nRunningVolt, VoltMonCallBack_t pCallback = NULL,
						 uint16_t nHysteresisVolt = CTRL_VOLT_MON_HYSTERESIS_MV,
						 BF_Lib::Timers::TIMERS_TIME_TD checkInterval = CTRL_VOLT_MON_RUNNING_INTERVAL_MS );

		/**
		 * @brief Gets the current Voltage state
		 * @return Current voltage state
		 * @see VoltageState_t
		 */
		VoltageState_t GetVoltState();

		/**
		 * @brief Gets current voltage
		 * @return Current voltage
		 */
		uint16_t GetCurrentVoltage();

	private:
		Voltage_Monitor( const Voltage_Monitor& );	///< Private copy constructor
		Voltage_Monitor & operator =( const Voltage_Monitor & );///< Private copy assignment operator

		static const uint16_t CTRL_VOLT_MON_RUNNING_INTERVAL_MS = 11U;	// milliseconds
		static const uint16_t CTRL_VOLT_MON_HYSTERESIS_MV = 0U;		// millivolts

		/**
		 * @brief Static method for timer callback
		 * @param[in] handle - this pointer
		 */
		static void MonitorVoltageStatic( BF_Lib::Timers::TIMERS_CBACK_PARAM_TD handle )
		{
			( reinterpret_cast<Voltage_Monitor*>( handle ) )->MonitorVoltage();
		}

		/**
		 * @brief Refreshes the current voltage and voltage state
		 */
		void MonitorVoltage();

		Voltage_Divider* m_pVoltDivider;
		VoltageState_t m_currentState;
		VoltMonCallBack_t m_pCallback;
		uint16_t m_nLowThreshVolt;
		uint16_t m_nRunningVolt;
		uint16_t m_nCurVoltage;
		uint16_t m_nHysteresisVolt;
};

}	// BF_Misc
#endif
