#include <stdio.h>
#include <iostream>
#include "pscrypto-test-supp.hpp"
#include "cryptoApi.h"
#include <vector>
#include "../digest/sha256_standalone.h"

static const unsigned char randbytes[] = {
  0x71, 0x25, 0x53, 0x16, 0xa7, 0xc1, 0x9f, 0x87, 0xf6, 0x58, 0xa5, 0x97,
  0x54, 0x7c, 0xd1, 0x1c, 0x94, 0x2a, 0xdd, 0x19, 0xc8, 0xfc, 0x52, 0x94,
  0x9a, 0x10, 0x55, 0x7b, 0x90, 0x04, 0x70, 0x79, 0x42, 0xa2, 0xb9, 0x15,
  0x3f, 0xf0, 0x44, 0xae, 0xa4, 0x95, 0x07, 0xab, 0x6e, 0x26, 0x16, 0x7f,
  0x08, 0x14, 0x2e, 0x12, 0xfc, 0xda, 0x56, 0xdb, 0x34, 0xaf, 0x2f, 0xea,
  0xed, 0xa3, 0x7b, 0x97, 0xa0, 0x7a, 0xa2, 0xb5, 0xfa, 0x01, 0x9c, 0x78,
  0x73, 0xff, 0x26, 0xec, 0xd4, 0xec, 0x57, 0xe0, 0xd5, 0x8e, 0x3a, 0x6c,
  0xf3, 0x6d, 0x3c, 0x62, 0x54, 0xbb, 0xe4, 0x82, 0x74, 0x69, 0x43, 0xc7,
  0x24, 0x5a, 0x86, 0x56, 0x87, 0xc5, 0x8e, 0x31, 0x5f, 0x08, 0xb5, 0x84,
  0xf3, 0x67, 0x4d, 0x50, 0x05, 0xde, 0x2f, 0xd0, 0xe8, 0xa4, 0x74, 0x94,
  0x51, 0x68, 0xc8, 0xa2, 0x8c, 0xb7, 0x77, 0xd8, 0xb6, 0x72, 0x0e, 0x16,
  0x2c, 0x91, 0x98, 0xa5, 0xcd, 0x62, 0x4f, 0x72, 0x23, 0x25, 0xfe, 0x8a,
  0x04, 0x24, 0xa3, 0xb3, 0x64, 0x09, 0xc2, 0x4b, 0xa2, 0x15, 0xf7, 0x23,
  0xb7, 0xc0, 0x6d, 0x42, 0x60, 0xb6, 0x39, 0x9c, 0x98, 0x23, 0xaa, 0x5b,
  0x25, 0x29, 0xf0, 0x95, 0x61, 0x4d, 0x0c, 0xc1, 0x11, 0x73, 0xd7, 0x5f,
  0x1f, 0x88, 0x3b, 0xa7, 0x07, 0xe6, 0xfd, 0xe9, 0x22, 0xa3, 0x00, 0xc3,
  0x16, 0xa6, 0x54, 0xf4, 0x05, 0x16, 0xa9, 0x6f, 0x9e, 0xb0, 0x8e, 0x6e,
  0x3a, 0xfb, 0xc6, 0x13, 0x71, 0xa2, 0xae, 0x9d, 0xc3, 0x57, 0x62, 0xd5,
  0x03, 0x86, 0xbe, 0x10, 0x0e, 0x59, 0x90, 0xb9, 0x3b, 0x97, 0xed, 0xe6,
  0x20, 0x7f, 0x86, 0x8a, 0x90, 0x17, 0x88, 0xe4, 0x8b, 0x27, 0x4d, 0xfc,
  0x34, 0x98, 0x95, 0x52, 0x47, 0x0b, 0xe7, 0x40, 0x28, 0xe7, 0x52, 0xb5,
  0x68, 0xe1, 0xf3, 0x06, 0x56, 0x72, 0x9a, 0x75, 0x20, 0x11, 0xc7, 0x16,
  0xaf, 0x04, 0x67, 0x9f, 0xcb, 0x2e, 0xff, 0x4a, 0xbc, 0x29, 0x99, 0x76,
  0x43, 0x89, 0x96, 0x6c, 0xfe, 0x8a, 0x8b, 0xd4, 0xba, 0x8f, 0xb2, 0x0e,
  0x32, 0xbf, 0xb1, 0x42, 0xce, 0xee, 0x26, 0xa9, 0x93, 0x60, 0x5a, 0x05,
  0x4c, 0x2b, 0xb0, 0xd3, 0x20, 0xab, 0x92, 0xfd, 0x26, 0xad, 0x77, 0xfa,
  0xbc, 0xc8, 0x68, 0x2f, 0x9f, 0xf6, 0xe1, 0x1c, 0x0a, 0x54, 0x70, 0xef,
  0x0d, 0x90, 0x07, 0xa1, 0xa1, 0x92, 0x37, 0x03, 0x43, 0xf0, 0xce, 0xc4,
  0x1c, 0x69, 0x4c, 0x0d, 0x9b, 0xe8, 0xfa, 0x85, 0x18, 0x5a, 0x23, 0x8e,
  0x18, 0xb1, 0xaf, 0xd9, 0x95, 0x75, 0x59, 0x49, 0xc4, 0xed, 0xe8, 0x65,
  0xee, 0x6c, 0x63, 0x9b, 0x4f, 0xb6, 0x84, 0x82, 0x7e, 0xa6, 0x26, 0x02,
  0xa0, 0x0e, 0x01, 0xbd, 0x58, 0xec, 0xca, 0x2a, 0xc4, 0x9b, 0xb7, 0x21,
  0xfd, 0x62, 0xca, 0xe7, 0x25, 0xd5, 0x82, 0xe1, 0x4c, 0x22, 0x9c, 0x7c,
  0x29, 0x83, 0x54, 0xfe, 0xf6, 0x67, 0xa1, 0x5d, 0x04, 0xf8, 0xc8, 0xa6,
  0x4f, 0x56, 0xb9, 0x37, 0xc8, 0x88, 0x7e, 0x72, 0x3f, 0x43, 0x91, 0x5b,
  0xa3, 0x26, 0x63, 0xa0, 0x91, 0xb7, 0x16, 0xa7, 0x06, 0x99, 0x7b, 0xe5,
  0xb0, 0xf7, 0xa7, 0x5f, 0xbb, 0x7a, 0xad, 0x58, 0xc0, 0x00, 0x77, 0x5f,
  0x99, 0x43, 0x4c, 0xfd, 0xbb, 0x59, 0xe5, 0x93, 0x6a, 0x7e, 0x85, 0xe4,
  0x88, 0x1e, 0xac, 0xe1, 0xc2, 0xc7, 0xf8, 0x83, 0x01, 0xd3, 0x7e, 0x36,
  0x10, 0xd7, 0x4b, 0xe9, 0xec, 0x35, 0xfb, 0xf1, 0x01, 0xa0, 0xe9, 0xf0,
  0xe1, 0x8d, 0xc8, 0x88, 0x34, 0x8d, 0xdd, 0x4d, 0xf0, 0xd6, 0x7c, 0x3b,
  0x2e, 0xab, 0x40, 0xa5, 0x55, 0x1a, 0xcf, 0xc5, 0xc3, 0x6e, 0x82, 0xfb,
  0x14, 0x5c, 0xc1, 0x70, 0xa1, 0xca, 0x80, 0x6f, 0xda, 0x91, 0x98, 0x3c,
  0xfb, 0x24, 0x3a, 0x8b, 0x7e, 0x11, 0x1e, 0xad, 0x8f, 0x01, 0xde, 0x7c,
  0x02, 0x1b, 0x6e, 0xe9, 0xfb, 0x05, 0x10, 0x53, 0x10, 0xc3, 0xb3, 0x1a,
  0x10, 0xe0, 0x5f, 0x33, 0x8e, 0x49, 0x56, 0x89, 0xd6, 0xd6, 0x7f, 0x64,
  0xfa, 0xbd, 0xa4, 0xac, 0x74, 0xde, 0xa5, 0xdd, 0xf8, 0x66, 0x03, 0xe3,
  0x23, 0x07, 0x6d, 0xd1, 0x95, 0x39, 0x80, 0xa6, 0xee, 0xc6, 0x8c, 0x93,
  0x0d, 0x2f, 0xeb, 0xd0, 0x29, 0xb3, 0x98, 0x7b, 0xbb, 0xf6, 0xdf, 0x73,
  0x1e, 0x37, 0x48, 0x30, 0xb6, 0xd6, 0x52, 0x54, 0xbe, 0x17, 0x5a, 0xdf,
  0x2c, 0x48, 0x13, 0xe5, 0x4b, 0x8b, 0x6a, 0xa7, 0xfc, 0xb9, 0xff, 0x00,
  0x9c, 0x2d, 0x4f, 0xf7, 0x2f, 0x82, 0x88, 0xf5, 0x6e, 0x02, 0x0a, 0x1c,
  0x58, 0x36, 0x2d, 0xc6, 0x67, 0x1d, 0x68, 0xd6, 0x32, 0x57, 0x2f, 0x40,
  0xe9, 0x6f, 0x01, 0xc8, 0x76, 0x04, 0x0b, 0x81, 0x9e, 0x58, 0x1f, 0xfa,
  0xf9, 0xa6, 0x67, 0x6a, 0xcf, 0x62, 0x62, 0x80, 0xed, 0x99, 0x4e, 0x80,
  0x28, 0xd8, 0xdf, 0xb2, 0xb9, 0x6d, 0x93, 0x43, 0x4d, 0xe5, 0xdb, 0x41,
  0x25, 0xe3, 0x12, 0x51, 0x78, 0x17, 0x5e, 0x23, 0x84, 0x5d, 0x16, 0x51,
  0x9f, 0x30, 0xb6, 0x51, 0x4b, 0x33, 0x24, 0x5e, 0xa6, 0x27, 0x75, 0x5c,
  0x54, 0x65, 0xb9, 0xec, 0x35, 0x80, 0xae, 0xbb, 0xf0, 0x30, 0x51, 0x32,
  0x6a, 0x12, 0xcb, 0x47, 0xce, 0x13, 0xce, 0x7f, 0x8e, 0x67, 0xb4, 0x23,
  0x2b, 0xa5, 0x4c, 0x98, 0xb4, 0x3d, 0x62, 0x28, 0x51, 0x54, 0x35, 0xb6,
  0x27, 0x3c, 0x3a, 0xa2, 0x03, 0xec, 0x02, 0xb1, 0xc7, 0x67, 0xf7, 0x87,
  0x78, 0xf5, 0x5e, 0x1f, 0xed, 0x87, 0x61, 0xd9, 0x7e, 0xac, 0xfb, 0xcb,
  0x44, 0xaa, 0xe2, 0xa4, 0x79, 0x94, 0xe9, 0xd7, 0xc7, 0x69, 0x9e, 0xd1,
  0x17, 0x34, 0x69, 0x3a, 0x52, 0xec, 0x64, 0x9a, 0x86, 0xc9, 0x7a, 0xca,
  0xb8, 0xc9, 0x7c, 0xb0, 0xc1, 0x85, 0xba, 0xfc, 0xde, 0x3c, 0x5f, 0xe8,
  0xeb, 0xb4, 0x50, 0x33, 0x07, 0x9f, 0x08, 0x89, 0x69, 0xdb, 0x3f, 0x79,
  0x41, 0x0c, 0x00, 0x43, 0x5b, 0x74, 0x7b, 0x5f, 0xa6, 0x09, 0x96, 0xf9,
  0x54, 0x3e, 0xeb, 0x8a, 0xe3, 0x7f, 0x83, 0x61, 0x2a, 0xc8, 0x4f, 0x8f,
  0xea, 0x39, 0xd1, 0xe8, 0x9d, 0xde, 0x9d, 0xb2, 0x29, 0x8e, 0x31, 0xc3,
  0x1d, 0xef, 0x49, 0x20, 0x59, 0xb2, 0x7c, 0x4c, 0xf7, 0xbc, 0x10, 0x54,
  0xe7, 0x0b, 0x74, 0x0e, 0xe8, 0x98, 0x3e, 0xa4, 0x52, 0xac, 0xee, 0x0c,
  0x44, 0xa6, 0x9a, 0x67, 0x8d, 0xbe, 0x2a, 0xa4, 0x0e, 0xd0, 0x46, 0xc2,
  0xf6, 0x2e, 0x54, 0xa1, 0xb3, 0x22, 0xbd, 0x76, 0x13, 0x3f, 0x08, 0x21,
  0x71, 0x2f, 0x7f, 0xb1, 0x4f, 0x12, 0xa1, 0xd8, 0xd2, 0xf9, 0xf6, 0x99,
  0x03, 0x86, 0xb2, 0x6e, 0x3c, 0x82, 0x56, 0xe7, 0xb2, 0x0b, 0xe9, 0xcd,
  0x2d, 0xc4, 0x97, 0x0a, 0x9e, 0x3e, 0xa5, 0x97, 0x11, 0xb3, 0x9e, 0xf1,
  0xd5, 0x5a, 0xcb, 0x18, 0x52, 0x73, 0xa5, 0xd2, 0x26, 0x21, 0xe5, 0x7e,
  0x4b, 0x37, 0x23, 0xec, 0xe0, 0xb8, 0x92, 0x9d, 0x95, 0x18, 0x79, 0xb0,
  0x0e, 0x57, 0x13, 0x0e, 0x33, 0x64, 0x60, 0xb5, 0xbf, 0xe6, 0xcb, 0x07,
  0xc2, 0xb9, 0x5d, 0x76, 0xc3, 0x67, 0x65, 0xfb, 0x72, 0x71, 0x8e, 0x62,
  0x05, 0x9f, 0x8d, 0x67, 0xd6, 0xa4, 0x93, 0x88, 0xec, 0xc8, 0x61, 0xfa,
  0x1f, 0x87, 0x66, 0x6b, 0x5c, 0x18, 0x00, 0xde, 0xef, 0xac, 0x9d, 0x6b,
  0xfc, 0x79, 0x9d, 0x0b, 0x1f, 0x7f, 0x1a, 0xe4, 0xee, 0xec, 0xa7, 0xcc,
  0xa1, 0x29, 0xa0, 0x00, 0x1f, 0xc7, 0x13, 0x55, 0xd2, 0xfa, 0xb6, 0x14,
  0xec, 0xf0, 0x1b, 0x7e, 0x09, 0x16, 0x4b, 0x96, 0x1b, 0xf3, 0x5e, 0x1c,
  0x59, 0xb1, 0xd8, 0x36, 0xd1, 0x64, 0x9a, 0xd4, 0x07, 0x04, 0x8e, 0x77,
  0x4a, 0xa0, 0x5d, 0x3f, 0xb8, 0x35, 0x91, 0x2d, 0x6d, 0x9a, 0x68, 0xb5,
  0xce, 0xc0, 0x74, 0x18, 0xe4, 0x2f, 0xf5, 0x23, 0x0c, 0xf2, 0x7c, 0x95,
  0x70, 0xc2, 0x44, 0xbd, 0xa4, 0xca, 0x0a, 0x62, 0x3f, 0x53, 0x6e, 0x88,
  0xf2, 0xa7, 0x17, 0xe8, 0x28, 0xa4, 0xc1, 0x7c, 0x8a, 0x8b, 0x31, 0xc1,
  0x9f, 0x9b, 0x23, 0xae, 0x91, 0xae, 0xc4, 0x0a, 0x1c, 0xb9, 0x75, 0x37,
  0x36, 0x55, 0x07, 0x34, 0xa5, 0x85, 0x50, 0xea, 0xf3, 0xe9, 0xbe, 0x32,
  0x3b, 0x86, 0x7d, 0x7f, 0x62, 0xce, 0x69, 0xb1, 0x0a, 0x0a, 0x88, 0x95,
  0xd7, 0xb2, 0x0e, 0x41, 0xe1, 0x75, 0xe4, 0x65, 0x17, 0xce, 0xae, 0x34,
  0x94, 0xf5, 0xd0, 0x21, 0xd0, 0x98, 0x98, 0x16, 0x0b, 0x1c, 0x23, 0xf6,
  0xf4, 0x8d, 0xe6, 0x17, 0xe2, 0x13, 0xf6, 0x79, 0x27, 0x67, 0xe3, 0x2a,
  0x18, 0x72, 0x56, 0x25, 0xcd, 0x70, 0x67, 0x53, 0x22, 0xfc, 0xb5, 0xff,
  0x45, 0x50, 0xb1, 0xbf, 0x56, 0xf4, 0xd0, 0xf0, 0xf2, 0xe4, 0x2f, 0x6e,
  0x73, 0x07, 0x4c, 0x73, 0xc9, 0x4a, 0x61, 0x39, 0xc5, 0xbc, 0x84, 0xe3,
  0x0b, 0x8f, 0xd1, 0xd7, 0x81, 0xc4, 0x9d, 0x84, 0x97, 0xa6, 0x9c, 0xc1,
  0x73, 0x11, 0x1f, 0x59, 0xdf, 0xd1, 0xb6, 0xfd, 0x6c, 0x88, 0x84, 0x74,
  0xf1, 0xa9, 0xac, 0xa7, 0x96, 0xda, 0xa8, 0x51, 0xb2, 0x14, 0x21, 0x61,
  0xa6, 0xb7, 0x09, 0x82, 0x63, 0x3c, 0x00, 0xe0, 0x7a, 0xeb, 0x7e, 0x52,
  0x46, 0x8a, 0xae, 0x96, 0xe4, 0x7f, 0x96, 0x84, 0x10, 0x89, 0xe4, 0x68,
  0xd4, 0x08, 0x51, 0x8f, 0x0e, 0xa9, 0xe0, 0x68, 0x8d, 0xc8, 0xa2, 0x7d,
  0x81, 0x5a, 0x9a, 0x12, 0x49, 0x7a, 0xd1, 0x32, 0xa7, 0x16, 0xb3, 0x51,
  0x92, 0x2a, 0xa3, 0xcc, 0x27, 0x04, 0x8a, 0x77, 0x94, 0x30, 0xa5, 0x29,
  0x8e, 0x0a, 0x15, 0x1c, 0x7e, 0x0c, 0x35, 0x39, 0x85, 0xa8, 0x38, 0x41,
  0xc7, 0x5d, 0x2c, 0xc0, 0x21, 0x0e, 0xa5, 0x24, 0x11, 0x3b, 0xcf, 0x0b,
  0x49, 0xc8, 0x27, 0x56, 0x48, 0x59, 0xa2, 0x49, 0x9c, 0xb9, 0xdd, 0x84,
  0x4b, 0xc8, 0x4a, 0xd5, 0xbc, 0xac, 0xce, 0xd3, 0xe4, 0xfa, 0xbd, 0x8a,
  0xf6, 0x20, 0x27, 0x85, 0xe8, 0xaa, 0x97, 0x2b, 0xc9, 0xaf, 0x57, 0xe7,
  0x43, 0x4e, 0xe3, 0x0c, 0x8c, 0xcb, 0xf4, 0x88, 0x0a, 0x9f, 0x97, 0x87,
  0x91, 0x7f, 0xe2, 0x28, 0xa0, 0x6f, 0xe8, 0x03, 0x4e, 0xd9, 0x1e, 0x7c,
  0xf7, 0x0e, 0x0f, 0xdd, 0x3e, 0x6a, 0x8f, 0x5b, 0x27, 0x22, 0xa0, 0x6a,
  0x5d, 0x21, 0xde, 0xd5, 0x8c, 0x8a, 0x00, 0x27, 0xd3, 0xef, 0xfb, 0x59,
  0x51, 0xc8, 0xee, 0x5e, 0x38, 0xec, 0xe5, 0xd1, 0x1d, 0x81, 0xca, 0xf2,
  0xd1, 0xe8, 0x09, 0x76, 0x19, 0x04, 0x10, 0xf3, 0x49, 0xb7, 0x7f, 0x5c,
  0xd0, 0xff, 0xf7, 0x82, 0x52, 0xe3, 0x12, 0x1d, 0x0a, 0x68, 0x24, 0x8a,
  0x40, 0xf5, 0x94, 0xae, 0x7f, 0x48, 0xda, 0x00, 0x83, 0x56, 0x7b, 0x87,
  0xa6, 0x7e, 0x8a, 0xe8, 0xae, 0xd8, 0x2b, 0x39, 0x51, 0x2f, 0x4b, 0xd4,
  0x24, 0x6c, 0x6c, 0x11, 0x55, 0xd7, 0x92, 0x47, 0xf8, 0xdb, 0x3d, 0xbc,
  0xe2, 0x48, 0x34, 0x38, 0x9e, 0x5a, 0x6a, 0x96, 0x68, 0x93, 0x9b, 0x9e,
  0x39, 0xf5, 0x1d, 0x5b, 0xbc, 0x57, 0x60, 0x18, 0x1f, 0xc7, 0xea, 0x08,
  0x8c, 0x3e, 0x06, 0xc0, 0x20, 0xfd, 0xee, 0x6b, 0xde, 0xc0, 0xb7, 0xe4,
  0x71, 0xfc, 0xf0, 0x7d, 0x94, 0xd2, 0xf5, 0xb7, 0x20, 0x38, 0x67, 0xc5,
  0x04, 0x4c, 0xe0, 0x58, 0x18, 0x35, 0x60, 0x2e, 0xc5, 0x11, 0x12, 0xe7,
  0x4e, 0x7a, 0xd5, 0xda, 0x1b, 0x2e, 0x6b, 0xe4, 0x9a, 0xdd, 0xef, 0x02,
  0xf1, 0x86, 0x86, 0x05, 0x74, 0x14, 0xac, 0x68, 0x02, 0x5d, 0x28, 0xc4,
  0xe1, 0x0a, 0x73, 0xa5, 0x6b, 0xc9, 0xd6, 0xb7, 0xde, 0x83, 0x33, 0x80,
  0x2d, 0xab, 0x49, 0x1d, 0x1d, 0x3e, 0x8d, 0x8f, 0x6b, 0xe5, 0x33, 0x87,
  0x61, 0x77, 0x03, 0xaf, 0x1e, 0x79, 0x38, 0x69, 0x77, 0xda, 0xa8, 0x92,
  0x1a, 0xfd, 0x4a, 0x6c, 0x98, 0xea, 0x1a, 0x23, 0x49, 0xb4, 0xfb, 0x13,
  0x85, 0x1c, 0xaf, 0x56, 0xf5, 0x3c, 0x27, 0xe7, 0x10, 0x92, 0x36, 0x60,
  0x23, 0x86, 0x4b, 0x27, 0x56, 0x17, 0x16, 0x9e, 0x5e, 0x16, 0xc1, 0x23,
  0xd3, 0x64, 0x85, 0x8b, 0x96, 0x07, 0xab, 0xbf, 0x3f, 0xe2, 0x52, 0xee,
  0xf8, 0x55, 0x20, 0x79, 0x5e, 0x52, 0x47, 0xa8, 0x89, 0x0c, 0xa6, 0x4b,
  0x59, 0x5f, 0xdb, 0x6e, 0xd9, 0x62, 0xdb, 0xe2, 0x37, 0x55, 0x09, 0xe5,
  0x15, 0x4c, 0x2a, 0x65, 0x12, 0xe8, 0xd6, 0x2a, 0xd8, 0x20, 0x27, 0x87,
  0xfd, 0xb3, 0xd4, 0xe2, 0x59, 0x6a, 0xce, 0xc2, 0xe4, 0x0e, 0xaf, 0x21,
  0x38, 0x81, 0xe5, 0x15, 0xaf, 0x7c, 0xd6, 0x2c, 0x25, 0x12, 0xfb, 0x8e,
  0x95, 0x93, 0x1a, 0x6b, 0xcd, 0x5d, 0x0a, 0x76, 0x33, 0x51, 0xeb, 0x69,
  0xd5, 0x5e, 0x1d, 0xe4, 0xdd, 0xb1, 0xf0, 0xf5, 0x0c, 0x40, 0xbc, 0xd5,
  0x93, 0x05, 0xdb, 0xc9, 0x89, 0x32, 0xc9, 0x4b, 0x14, 0xb4, 0xed, 0x3d,
  0x7c, 0x3b, 0x68, 0x05, 0x9c, 0x6d, 0xad, 0x98, 0x10, 0x03, 0xc0, 0xbe,
  0xe1, 0x78, 0xb1, 0xfb, 0x30, 0xde, 0x28, 0xb6, 0x87, 0x4e, 0x24, 0x4f,
  0xdf, 0x48, 0x79, 0x1e, 0xbd, 0xba, 0x76, 0xba, 0xde, 0x66, 0x07, 0xf5,
  0x85, 0xbe, 0x85, 0x78, 0x21, 0x4d, 0x54, 0x2a, 0x9b, 0x2c, 0x25, 0x68,
  0xf9, 0x4f, 0x9b, 0x36, 0xf7, 0x24, 0x28, 0x1a, 0x17, 0x2c, 0x79, 0x22,
  0xd5, 0xd9, 0x8e, 0x0e, 0x44, 0x46, 0xb2, 0x51, 0xde, 0x7b, 0xe8, 0x1c,
  0x5d, 0xc8, 0xe0, 0x07, 0xc9, 0x6a, 0xfb, 0x70, 0xfc, 0x8b, 0x29, 0x2d,
  0x6d, 0x96, 0x66, 0x07, 0xa6, 0x7f, 0x9b, 0x8f, 0x7f, 0x1c, 0x61, 0x7a,
  0x25, 0x02, 0xef, 0x0c, 0x2b, 0x0c, 0xbb, 0x5d, 0x10, 0xba, 0x0c, 0xa0,
  0x76, 0xc5, 0xb4, 0x2b, 0x06, 0xc6, 0x0e, 0x16, 0xb8, 0xf4, 0xfe, 0x39,
  0xb2, 0x45, 0xc1, 0x2b, 0x3d, 0xc5, 0x11, 0xa5, 0x87, 0xc7, 0x0a, 0xdb,
  0x01, 0xb5, 0xe2, 0xa1, 0x31, 0xf3, 0x08, 0xe0, 0xb7, 0xb6, 0x33, 0x53,
  0xf4, 0x67, 0x1f, 0x3a, 0x40, 0x06, 0xdd, 0x43, 0x78, 0xb5, 0x93, 0x98,
  0xf9, 0x52, 0x1a, 0x4c, 0xa6, 0xdf, 0xbf, 0xa1, 0xb9, 0xe7, 0x0a, 0xe9,
  0xb3, 0x50, 0xca, 0x14, 0xb8, 0xd1, 0xc8, 0x8d, 0xd3, 0x25, 0x68, 0x75,
  0xca, 0xaf, 0x54, 0xf8, 0x06, 0x06, 0xec, 0xb9, 0x08, 0xeb, 0x88, 0x0b,
  0xd1, 0x8d, 0xda, 0x2d, 0x91, 0xd6, 0x8a, 0x9a, 0x64, 0x16, 0xc1, 0x38,
  0x2c, 0x29, 0xe7, 0xe9, 0xe1, 0x95, 0x56, 0x5f, 0x85, 0xab, 0xdd, 0x14,
  0x3e, 0xd9, 0x41, 0x6b, 0xd6, 0x7d, 0xfe, 0x39, 0x5d, 0x96, 0x7a, 0x08,
  0x9d, 0xb4, 0x5b, 0x41, 0x45, 0x88, 0xcb, 0xee, 0xd9, 0xc2, 0x6b, 0x92,
  0x0e, 0x3b, 0x70, 0x8e, 0x38, 0x1c, 0xe0, 0x3e, 0xcf, 0xdd, 0x05, 0x23,
  0x0c, 0xb1, 0x19, 0xa7, 0x96, 0x1c, 0x17, 0xa0, 0x79, 0x35, 0x28, 0x97,
  0xb5, 0x8c, 0x02, 0x7a, 0x17, 0x1a, 0x23, 0xa1, 0xd7, 0xc6, 0xaa, 0x18,
  0x78, 0x3e, 0xf2, 0xa9, 0x3a, 0x6f, 0xde, 0x2c, 0x1b, 0xd1, 0x7e, 0x87,
  0xcb, 0x92, 0x7c, 0x73, 0x81, 0x5a, 0xc7, 0x9d, 0xd6, 0x67, 0x47, 0x15,
  0x1f, 0x91, 0x30, 0x69, 0x6f, 0x2f, 0xc7, 0xb4
};
unsigned int randbytes_len = 2048;

static const unsigned char ref[SHA256_HASHLEN] =
{
  0xa7, 0x90, 0xb7, 0x2c, 0x4e, 0x44, 0x65, 0xaa, 0xf0, 0x3c, 0x5d, 0x49,
  0x62, 0x53, 0x3a, 0xb1, 0x25, 0x04, 0x37, 0x12, 0x30, 0x80, 0x5f, 0xbe,
  0x51, 0x2b, 0xe1, 0x18, 0x5d, 0x36, 0x32, 0x2d
};

/* Helper: compare C arrays of same type and size. */
#define FAIL_IF_NOT_SAME(type, array1, array2, len)                     \
    do                                                                  \
    {                                                                   \
        std::vector<type> expected((array1), (array1) + (len));         \
        std::vector<type> actual((array2), (array2) + (len));           \
                                                                        \
        FAIL_IF(expected != actual);                                    \
    } while(0)

TEST_CASE("TEST_psSha256Standalone")
{
    unsigned char digest[SHA256_HASHLEN] = { 0 };

    REQUIRE(perform_psCrypto_library_init() == OK);
    psSha256Standalone(randbytes, 2048, digest);

    FAIL_IF_NOT_SAME(uint8_t, digest, ref, sizeof digest);
    perform_psCrypto_library_cleanup();
}

TEST_CASE("TEST_psSha256Final_multipart")
{
    psSha256_t md;
    unsigned char digest[SHA256_HASHLEN] = { 0 };

    REQUIRE(perform_psCrypto_library_init() == OK);
    psSha256PreInit(&md);
    psSha256Init(&md);
    psSha256Update(&md, randbytes, 1666);
    psSha256Update(&md, randbytes + 1666, 2048 - 1666);
    psSha256Final(&md, digest);

    FAIL_IF_NOT_SAME(uint8_t, digest, ref, sizeof digest);
    perform_psCrypto_library_cleanup();
}

TEST_CASE("TEST_psSha256Final_multipart_with_copy")
{
    psSha256_t md;
    psSha256_t md2;
    unsigned char digest[SHA256_HASHLEN] = { 0 };
    unsigned char digest2[SHA256_HASHLEN] = { 0 };

    REQUIRE(perform_psCrypto_library_init() == OK);
    psSha256PreInit(&md);
    psSha256Init(&md);
    psSha256Update(&md, randbytes, 1666);
    psSha256Cpy(&md2, &md);
    psSha256Update(&md2, randbytes + 1666, 2048 - 1666);
    psSha256Update(&md, randbytes + 1666, 2048 - 1666);
    psSha256Final(&md2, digest2);
    psSha256Final(&md, digest);

    FAIL_IF_NOT_SAME(uint8_t, digest, ref, sizeof digest);
    FAIL_IF_NOT_SAME(uint8_t, digest2, ref, sizeof digest2);
    perform_psCrypto_library_cleanup();
}

TEST_CASE("TEST_psSha256Final_multipart_with_copy9")
{
    psSha256_t md;
    psSha256_t md2;
    psSha256_t md3;
    psSha256_t md4;
    psSha256_t md5;
    psSha256_t md6;
    psSha256_t md7;
    psSha256_t md8;
    psSha256_t md9;
    unsigned char digest[SHA256_HASHLEN] = { 0 };
    unsigned char digest2[SHA256_HASHLEN] = { 0 };
    unsigned char digest3[SHA256_HASHLEN] = { 0 };
    unsigned char digest4[SHA256_HASHLEN] = { 0 };
    unsigned char digest5[SHA256_HASHLEN] = { 0 };
    unsigned char digest6[SHA256_HASHLEN] = { 0 };
    unsigned char digest7[SHA256_HASHLEN] = { 0 };
    unsigned char digest8[SHA256_HASHLEN] = { 0 };
    unsigned char digest9[SHA256_HASHLEN] = { 0 };

    REQUIRE(perform_psCrypto_library_init() == OK);
    psSha256PreInit(&md);
    psSha256Init(&md);
    psSha256Update(&md, randbytes, 1666);
    psSha256Cpy(&md2, &md);
    psSha256Cpy(&md3, &md);
    psSha256Cpy(&md4, &md);
    psSha256Cpy(&md5, &md);
    psSha256Cpy(&md6, &md);
    psSha256Cpy(&md7, &md);
    psSha256Cpy(&md8, &md);
    psSha256Cpy(&md9, &md);
    psSha256Update(&md3, randbytes + 1666, 2048 - 1666);
    psSha256Update(&md4, randbytes + 1666, 2048 - 1666);
    psSha256Update(&md5, randbytes + 1666, 2048 - 1666);
    psSha256Update(&md6, randbytes + 1666, 2048 - 1666);
    psSha256Update(&md7, randbytes + 1666, 2048 - 1666);
    psSha256Update(&md8, randbytes + 1666, 2048 - 1666);
    psSha256Update(&md9, randbytes + 1666, 2048 - 1666);
    psSha256Update(&md2, randbytes + 1666, 2048 - 1666);
    psSha256Update(&md, randbytes + 1666, 2048 - 1666);
    psSha256Final(&md3, digest3);
    psSha256Final(&md4, digest4);
    psSha256Final(&md5, digest5);
    psSha256Final(&md6, digest6);
    psSha256Final(&md7, digest7);
    psSha256Final(&md8, digest8);
    psSha256Final(&md9, digest9);
    psSha256Final(&md2, digest2);
    psSha256Final(&md, digest);

    FAIL_IF_NOT_SAME(uint8_t, digest, ref, sizeof digest);
    FAIL_IF_NOT_SAME(uint8_t, digest2, ref, sizeof digest2);
    FAIL_IF_NOT_SAME(uint8_t, digest3, ref, sizeof digest3);
    FAIL_IF_NOT_SAME(uint8_t, digest4, ref, sizeof digest4);
    FAIL_IF_NOT_SAME(uint8_t, digest5, ref, sizeof digest5);
    FAIL_IF_NOT_SAME(uint8_t, digest6, ref, sizeof digest6);
    FAIL_IF_NOT_SAME(uint8_t, digest7, ref, sizeof digest7);
    FAIL_IF_NOT_SAME(uint8_t, digest8, ref, sizeof digest8);
    FAIL_IF_NOT_SAME(uint8_t, digest9, ref, sizeof digest9);
    perform_psCrypto_library_cleanup();
}
