/**
 *      @file    prng.h
 *
 *
 *      Pseudorandom Number Generator header.
 */
/*
 *      Copyright (c) 2013-2017 INSIDE Secure Corporation
 *      All Rights Reserved
 *
 *      THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF INSIDE.
 *
 *      Please do not edit this file without first consulting INSIDE support.
 *      Unauthorized changes to this file are not supported by INSIDE.
 *
 *      The copyright notice above does not evidence any actual or intended
 *      publication of such source code.
 *
 *      This Module contains Proprietary Information of INSIDE and should be
 *      treated as Confidential.
 *
 *      The information in this file is provided for the exclusive use of the
 *      licensees of INSIDE. Such users have the right to use, modify,
 *      and incorporate this code into products for purposes authorized by the
 *      license agreement provided they include this notice and the associated
 *      copyright notice with any such product.
 *
 *      The information in this file is provided "AS IS" without warranty.
 */
/******************************************************************************/

#ifndef _h_PS_PRNG
# define _h_PS_PRNG

# ifdef USE_YARROW
/*
    AES SHA-1 implementation
 */
#  define CTR_COUNTER_LITTLE_ENDIAN    0x0000
#  define CTR_COUNTER_BIG_ENDIAN       0x1000

#  define AESBLOCKSIZE 16

typedef struct
{
#  ifdef USE_SHA256
    unsigned char pool[SHA256_HASH_SIZE]; /* hash of entropy */
#  else
    unsigned char pool[SHA1_HASH_SIZE];   /* hash of entropy */
#  endif
    int32 mode;                           /** The mode (endianess) of the CTR, 0==little, 1==big */
    int32 ctrlen;                         /** counter width */
    int32 padlen;                         /** The padding offset */
    int32 blocklen;                       /** The AESBLOCKSIZE */
    unsigned char ctr[AESBLOCKSIZE];      /** The counter being encrypted */
    unsigned char pad[AESBLOCKSIZE];      /** The actual prn */
    psAesKey_t key;                       /** The scheduled key */
} psYarrow_t;
# endif /* USE_YARROW */

/*
    prng.c wrapper
 */
# define RANDOM_BYTES_BEFORE_ENTROPY 1024 /* add entropy each time # bytes read */
# define RANDOM_ENTROPY_BYTES        8    /* Bytes of entropy from source */

typedef struct
{
# ifdef USE_YARROW
    psYarrow_t yarrow;
# endif
    uint32 bytecount;      /* number of bytes read from this context */
} psRandom_t;

/******************************************************************************/
#endif /* _h_PS_PRNG */

