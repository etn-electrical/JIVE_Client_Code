/**
 *      @file    asn1.h
 *
 *
 *      ASN.1 header.
 */
/*
 *      Copyright (c) 2013-2017 INSIDE Secure Corporation
 *      All Rights Reserved
 *
 *      THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF INSIDE.
 *
 *      Please do not edit this file without first consulting INSIDE support.
 *      Unauthorized changes to this file are not supported by INSIDE.
 *
 *      The copyright notice above does not evidence any actual or intended
 *      publication of such source code.
 *
 *      This Module contains Proprietary Information of INSIDE and should be
 *      treated as Confidential.
 *
 *      The information in this file is provided for the exclusive use of the
 *      licensees of INSIDE. Such users have the right to use, modify,
 *      and incorporate this code into products for purposes authorized by the
 *      license agreement provided they include this notice and the associated
 *      copyright notice with any such product.
 *
 *      The information in this file is provided "AS IS" without warranty.
 */

/******************************************************************************/

/* Allow inclusion of asn1.h as standalone. */
#ifndef _h_PS_CRYPTOAPI
# include "../cryptoApi.h"
#endif /* _h_PS_CRYPTOAPI */

/* Provide deprecation warnings for using deprecated functions. */
#include "pscompilerdep.h"

#ifndef _h_PS_ASN1
# define _h_PS_ASN1

/******************************************************************************/
/*
    8 bit bit masks for ASN.1 tag field
 */
# define ASN_PRIMITIVE           0x0
# define ASN_CONSTRUCTED         0x20

# define ASN_UNIVERSAL           0x0
# define ASN_APPLICATION         0x40
# define ASN_CONTEXT_SPECIFIC    0x80
# define ASN_PRIVATE             0xC0

/*
    ASN.1 primitive data types
 */
enum
{
    ASN_BOOLEAN = 1,
    ASN_INTEGER,
    ASN_BIT_STRING,
    ASN_OCTET_STRING,
    ASN_NULL,
    ASN_OID,
    ASN_ENUMERATED = 10,
    ASN_UTF8STRING = 12,
    ASN_SEQUENCE = 16,
    ASN_SET,
    ASN_PRINTABLESTRING = 19,
    ASN_T61STRING,
    ASN_IA5STRING = 22,
    ASN_UTCTIME,
    ASN_GENERALIZEDTIME,
    ASN_VISIBLE_STRING = 26,
    ASN_GENERAL_STRING,
    ASN_BMPSTRING = 30
};

# define ASN_UNKNOWN_LEN 65533

extern uint32_t getAsnTagLenUnsafe(const unsigned char *p);

extern int32_t getAsnLength(const unsigned char **p, psSizeL_t size,
                            psSize_t *valLen);
extern int32_t getAsnLength32(const unsigned char **p, psSizeL_t size,
                              uint32_t *valLen, uint32_t indefinite);
extern int32_t getAsnSequence(const unsigned char **pp, psSizeL_t size,
                              psSize_t *seqlen);
extern int32_t getAsnSequence32(const unsigned char **pp, psSizeL_t size,
                                psSize32_t *len, uint32_t indefinite);
extern int32_t getAsnSet(const unsigned char **pp,  psSizeL_t size,
                         psSize_t *setlen);
extern int32_t getAsnSet32(const unsigned char **pp, psSizeL_t size,
                           psSize32_t *len, uint32_t indefinite);
extern int32_t getAsnEnumerated(const unsigned char **pp, psSizeL_t size,
                                int32_t *val);

extern int32_t getAsnInteger(const unsigned char **pp, psSizeL_t size,
                             int32_t *val);
extern int32_t getAsnAlgorithmIdentifier(const unsigned char **pp, psSizeL_t size,
                                         int32_t *oi, psSize_t *paramLen);
extern int32_t getAsnOID(const unsigned char **pp, psSizeL_t size,
			 int32_t *oi,
			 uint8_t checkForParams, psSize_t *paramLen);
# ifdef USE_CMS
extern int32_t getStreamingAsnAlgorithmIdentifier(const unsigned char **pp, psSizeL_t size,
						  int32_t *oi, psSize_t *paramLen);
extern int32_t getAsnConstructedOctetString32(psPool_t *pool,
					      const unsigned char **pp, psSizeL_t size,
                                              unsigned char **outString, uint32_t *outStringLen);
# endif

# define MAX_OID_LEN     16     /**< Maximum number of segments in OID */
# define MAX_OID_BYTES   32     /**< Maximum number of bytes in OID. */
# define MAX_OID_PRINTED_LEN_NAMED 64 /* Maximum length of known OID in
                                         printed form. */
# define MAX_OID_PRINTED_LEN_BYTES (4 * MAX_OID_BYTES) /* Maximum length of
                                                          unknown OIDs. */
# define MAX_OID_PRINTED_LEN                                            \
    ((MAX_OID_PRINTED_LEN_NAMED) > (MAX_OID_PRINTED_LEN_BYTES) ?        \
     (MAX_OID_PRINTED_LEN_NAMED) : (MAX_OID_PRINTED_LEN_BYTES))

typedef uint8_t psAsnOid_t[MAX_OID_BYTES];

extern uint8_t asnParseOid(const unsigned char *der, psSizeL_t derlen,
                           uint32_t oid[MAX_OID_LEN]) PSDEPRECATED_WARN;

/* Copy Oid / Store Oid for later use. */
extern uint8_t asnCopyOid(const unsigned char *der, psSizeL_t derlen,
                          psAsnOid_t oid);

/* Get length of ASN.1 OID as an DER encoded byte sequence.
   Will return 0 for failure. */
extern psSizeL_t asnOidLenBytes(psAsnOid_t oid);

/* Get length of ASN.1 OID as numbers (or 0 for failure).
   Will return 0 for failure. */
extern uint8_t asnOidLenSegments(psAsnOid_t oid);

/* Format OID tag as string for printing. */
extern char *asnFormatOid(psPool_t *pool,
                          const unsigned char *oid, size_t oidlen);

/* Format octet string representing ASN.1 in Der encoded format. */
extern char *asnFormatDer(psPool_t *pool,
                          const unsigned char *Der_p,
                          size_t DerLen,
                          size_t MaxElements,
                          size_t MaxDepth,
                          size_t MaxElementOutput,
                          unsigned char Flags);

/* Format psAsnOid_t in dotted notation to provided character array.
   Returns a pointer to the array for convenience.

   The function is able to provide symbolic name for some X.509 OIDs.

   Note: This function is implemented by x509.c, but described here as
   logically the function belongs with the rest of ASN.1 decoding. */
const char *psSprintAsnOid(psAsnOid_t oid,
                           char out[MAX_OID_PRINTED_LEN]);

/******************************************************************************/

# ifdef USE_CERT_GEN

/*
    All these are OH (overhead) defines are byte lengths and are maximums
    without any values.  Yes, most are the same but the names help code
    readability quite a bit.
 */
#  define ASN_MAX_NUM_LENGTH_OCTETS 4
#  define ASN_LENGTH_OH ASN_MAX_NUM_LENGTH_OCTETS
#  define ASN_SEQUENCE_OH (ASN_LENGTH_OH + 1)
#  define ASN_SET_OH (ASN_LENGTH_OH + 1)
#  define ASN_STRING_OH (ASN_LENGTH_OH + 1)
#  define ASN_INTEGER_OH (ASN_LENGTH_OH + 1)
#  define ASN_OCTET_STRING_OH (ASN_LENGTH_OH + 1)
#  define ASN_BIT_STRING_OH (ASN_LENGTH_OH + 1)
#  define ASN_OID_OH (ASN_LENGTH_OH + 1)
#  define ASN_INTEGER_OH (ASN_LENGTH_OH + 1)
#  define ASN_UTCTIME_OH (ASN_LENGTH_OH + 1)
#  define ASN_BIG_OH ASN_INTEGER_OH
#  define ASN_BOOL_OH 2

/* Write ASN.1 OID as output (as DER encoded byte sequence).
   On successful execution function returns number of bytes written.
   If writing fails, the function returns 0. */
extern psSizeL_t psAsnWriteOid(psAsnOid_t oid,
                               unsigned char *der, psSizeL_t dermaxlen);

extern int32 asnWriteInteger(psBuf_t *out, int32 value);
extern int32 asnWriteOid(psBuf_t *out, int32 oid[], int32 oidLen);
extern int32_t asnWriteBig(psPool_t *pool, psBuf_t *out, const pstm_int *val);
extern int32 asnWriteSequence(psBuf_t *out, int32 size);
extern int32 asnWriteSet(psBuf_t *out, int32 size);
extern int32 asnPrependSet(psBuf_t *buf);
extern int32 asnPrependSequence(psBuf_t *buf);
extern int32 enoughAsnRoom(psBuf_t *out, int32 size);
extern int32_t der_length_integer(const pstm_int *num, psSize_t *outlen);

# endif /* USE_CERT_GEN */

# if defined(USE_CERT_GEN) || defined(USE_CMS)
extern int32 asnBytesToHold(int32 val);
extern int32 asnHelpWriteLength(unsigned char *out, int32 size);
extern int32 asn1TLOverhead(int32 dataLen);
extern int32 asnWriteOidChars(unsigned char *out, unsigned char *oid,
                              int32 oidLen);
extern int32_t asnEncodeDotNotationOID(psPool_t *pool,
        unsigned char *out_buf,
        psSizeL_t out_buf_len,
        psSizeL_t *num_enc_octets,
        const char *oid_dot_notation,
        psSizeL_t oid_dot_notation_len);
extern int32 asn1WriteOctetString(unsigned char *out, unsigned char *data,
                                  int32 len);

#define PS_ASN_ENCODE_SKIP_CONTENT_OCTETS 1

/** Encode bits to outBuf as a BIT STRING type using DER encoding.

    Encodes a BIT STRING value using DER encoding. This function will
    allocate a psBuf_t of suitable size. Caller is responsible for
    freeing.

    @param[in] pool Memory pool to use.
    @param[out] outBuf Buffer containing the encoded BIT STRING. This
    function will allocated the buffer. Caller is responsible for freeing.
    @param[in] bits Byte array containing the bits to encode.
    The first byte should contain the bits 0 to 7, the second should
    contain the bits 8 to 15, and so on.
    @param[in] bitsLen Number of bytes in the bits array.
    @param[in] numIgnoreBits Number of bits to ignore from the last
    byte in the bits array. This number will also be encoded as the
    first content octet of the BIT STRING, as per the DER specification.
    @param[in] optionFlags. Options. PS_ASN_ENCODE_SKIP_CONTENT_OCTETS will
    cause the function not to copy the actual content octets into outBuf;
    only the tag, length and the ignoreBits octets are encoded when this
    flag is set.
*/
extern int32 psAsnWriteBitStringDER(psPool_t *pool,
        psBuf_t **outBuf,
        unsigned char *bits,
        psSize_t bitsLen,
        psSize_t numIgnoreBits,
        uint32_t optionFlags);
# endif /* defined(USE_CERT_GEN) || defined(USE_CMS) */

#endif  /* _h_PS_ASN1 */

/******************************************************************************/

